# Derived from https://airflow.apache.org/docs/apache-airflow/2.7.0/docker-compose.yaml
# See https://airflow.apache.org/docs/apache-airflow/2.6.0/howto/docker-compose/index.html
# See https://airflow.apache.org/docs/docker-stack/index.html
# See https://airflow.apache.org/docs/apache-airflow/2.6.0/executor/celery.html?highlight=worker#architecture
# See https://airflow.apache.org/docs/apache-airflow/2.6.0/production-deployment.html

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.7.0
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_PROJ_DIR             - Base path to which all the files will be volumed.
#                                Default: .
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Use this option ONLY for quick checks. Installing requirements at container
#                                startup is done EVERY TIME the service is started.
#                                A better way is to build a custom image or extend the official image
#                                as described in https://airflow.apache.org/docs/docker-stack/build.html.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
version: '3.8'
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.7.0}
  build:
    context: .
    dockerfile: airflow.Dockerfile
  environment:
    &airflow-common-env
    # https://airflow.apache.org/docs/apache-airflow/2.6.0/executor/index.html
    # https://airflow.apache.org/docs/apache-airflow/2.6.0/core-concepts/executor/celery.html
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"
    AIRFLOW__WEBSERVER__DAG_ORIENTATION: "TB"
    # https://airflow.apache.org/docs/apache-airflow/2.6.0/faq.html#when-there-are-a-lot-1000-of-dags-files-how-to-speed-up-parsing-of-new-files
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 90
    # https://airflow.apache.org/docs/apache-airflow/2.6.0/howto/connection.html#storing-connections-in-environment-variables
    # Connections defined in environment variables will not show up in the Airflow UI or using 'airflow connections list'
    AIRFLOW_CONN_TORRENT_DAEMON: http://torrent-daemon:9091 # docker-compose "torrent-daemon" service
    AIRFLOW_CONN_LOCAL_OWMF_POSTGIS_DB: postgres://${owmf_db_user}:${owmf_db_password}@${owmf_db_host}:5432/${owmf_db_database} # connection to the configured OWMF PostGIS DB
    AIRFLOW_CONN_LOCAL_OWMF_POSTGIS_PLANET_DB: postgres://${owmf_db_user}:${owmf_db_password}@${owmf_db_host}:5432/planet # connection to the configured OWMF PostGIS DB
    AIRFLOW_CONN_WIKIDATA_API: ${owmf_wikidata_endpoint}
    # https://airflow.apache.org/docs/apache-airflow/stable/howto/variable.html#storing-variables-in-environment-variables
    AIRFLOW_VAR_OSM_FILTER_TAGS: ${owmf_osm_filter_tags:-}
    AIRFLOW_VAR_OSM_TEXT_KEY: ${owmf_osm_text_key:-}
    AIRFLOW_VAR_OSM_DESCRIPTION_KEY: ${owmf_osm_description_key:-}
    AIRFLOW_VAR_OSM_WIKIDATA_KEYS: ${owmf_osm_wikidata_keys:-}
    AIRFLOW_VAR_OSM_WIKIDATA_PROPERTIES: ${owmf_osm_wikidata_properties:-}
    AIRFLOW_VAR_PROPAGATE_DATA: ${owmf_propagate_data:-false}
    AIRFLOW_VAR_GLOBAL_MAP_THRESHOLD: ${owmf_global_map_threshold:-0}
    AIRFLOW_VAR_WORKDIR_BIND_TYPE: "volume"
    AIRFLOW_VAR_WORKDIR_BIND_SOURCE: "${COMPOSE_PROJECT_NAME:-osm-wikidata-map-framework}_db-init-work-dir" # docker-compose "db-init-work-dir" volume
    AIRFLOW_VAR_POSTGIS_BRIDGE: "${COMPOSE_PROJECT_NAME:-osm-wikidata-map-framework}_airflow-postgis-bridge" # docker-compose "airflow-postgis-bridge" network
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow-postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    networks:
      - airflow-internal
      - pgadmin-db-bridge
    profiles:
      - airflow-init
      - airflow-minimal
      - airflow

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: unless-stopped
    networks:
      - airflow-internal
    profiles:
      - airflow-init
      - airflow-minimal
      - airflow

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    depends_on:
      <<: *airflow-common-depends-on
      # airflow-init:
      #   condition: service_completed_successfully
    networks:
      - airflow-internal
      - airflow-postgis-bridge
    profiles:
      - airflow

  # https://airflow.apache.org/docs/apache-airflow/2.6.0/concepts/scheduler.html
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    depends_on:
      <<: *airflow-common-depends-on
      # airflow-init:
      #   condition: service_completed_successfully
    networks:
      - airflow-internal
    profiles:
      - airflow-minimal
      - airflow

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: unless-stopped
    depends_on:
      <<: *airflow-common-depends-on
      # airflow-init:
      #   condition: service_completed_successfully
    networks:
      - airflow-internal
      - airflow-postgis-bridge
      - airflow-torrent-bridge
    # In order to mount db-init-work-dir and the Docker socket for DinD, all common volumes need to be specified again
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
      - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
      - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
      - db-init-work-dir:/workdir:delegated
      # https://devopscube.com/run-docker-in-docker/
      - //var/run/docker.sock:/var/run/docker.sock:rw
    group_add:
      - docker
    profiles:
      - airflow-minimal
      - airflow

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    depends_on:
      <<: *airflow-common-depends-on
      # airflow-init:
      #   condition: service_completed_successfully
    networks:
      - airflow-internal
    profiles:
      - airflow-minimal
      - airflow

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins /workdir
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins} /workdir
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
      - db-init-work-dir:/workdir
    networks:
      - airflow-internal
    profiles:
      - airflow-init

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  torrent-daemon:
    image: linuxserver/transmission:4.0.3
    environment:
      - PUID=${AIRFLOW_UID:-50000}
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - torrent-daemon-config:/config:delegated
      - db-init-work-dir:/workdir:delegated
    networks:
      - airflow-torrent-bridge
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9091/transmission/web/"]
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    restart: unless-stopped
    profiles:
      - torrent
      - airflow

  owmf-postgis:
    image: postgis/postgis:15-3.3-alpine # arm64 currently not supported, TODO check https://github.com/postgis/docker-postgis/issues/216
    #image: odidev/postgis:13-3.1-alpine # supports arm64
    shm_size: 100m
    environment:
      - POSTGRES_USER=${owmf_db_user}
      - POSTGRES_PASSWORD=${owmf_db_password}
      - POSTGRES_DB=${owmf_db_database}
    volumes:
      - db-data:/var/lib/postgresql/data:delegated
    networks:
      - owmf-internal
      - pgadmin-db-bridge
      - airflow-postgis-bridge
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${owmf_db_user}"]
      interval: 5s
      retries: 5
    restart: unless-stopped
    profiles:
      - dev
      - lambda-dev
      - airflow
      - db

  pgadmin:
    image: dpage/pgadmin4:7.1
    ports:
      - "${owmf_pgadmin_port:-8000}:80"
    depends_on:
      - owmf-postgis
    environment:
      PGADMIN_DEFAULT_EMAIL: "app@app.app"
      PGADMIN_DEFAULT_PASSWORD: "app"
    volumes:
      - pgadmin-data:/var/lib/pgadmin:delegated
      - ./pgadmin_init.json:/pgadmin4/servers.json
    networks:
      - pgadmin-db-bridge
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:80/misc/ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    profiles:
      - dev
      - lambda-dev
  
  swagger-ui:
    image: swaggerapi/swagger-ui:v5.1.0
    ports:
      - "${owmf_swagger_port:-8001}:8080"
    volumes:
      - ./openapi-owmf.yaml:/usr/share/nginx/html/openapi-owmf.yaml
      - ./openapi-overpass.yaml:/usr/share/nginx/html/openapi-overpass.yaml
      - ./openapi-wikidata.yaml:/usr/share/nginx/html/openapi-wikidata.yaml
    environment:
      - API_URL=openapi-owmf.yaml
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:80/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    profiles:
      - dev
      - lambda-dev

  owmf-web-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    image: registry.gitlab.com/openetymologymap/osm-wikidata-map-framework/dev
    env_file:
      - .env
    ports:
      - "${owmf_web_http_port:-80}:80"
    networks:
      - owmf-internal
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:80/health.php"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    volumes:
      - ./public:/var/www/html
      - ./app:/var/www/app
    profiles:
      - dev

  owmf-web-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
      x-bake:
        # https://docs.docker.com/build/customize/bake/compose-file/
        # https://docs.docker.com/engine/reference/commandline/buildx_bake/
        platforms:
          - "linux/amd64"
          - "linux/arm64"
        tags:
          - registry.gitlab.com/openetymologymap/osm-wikidata-map-framework:${owmf_framework_image_tag}
          - registry.gitlab.com/openetymologymap/osm-wikidata-map-framework:latest
        cache-from:
          - type=registry,ref=registry.gitlab.com/openetymologymap/osm-wikidata-map-framework:buildx_bake_cache
        cache-to:
          - type=registry,ref=registry.gitlab.com/openetymologymap/osm-wikidata-map-framework:buildx_bake_cache,mode=max
    image: registry.gitlab.com/openetymologymap/osm-wikidata-map-framework:${owmf_framework_image_tag:-latest}
    env_file:
      - .env
    ports:
      - "${owmf_web_http_port:-80}:80"
      - "${owmf_web_https_port:-443}:443"
    networks:
      - owmf-internal
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:80/health.php"]
      interval: 20s
      timeout: 1s
      retries: 5
    restart: unless-stopped
    volumes:
      - apache-sites-available:/etc/apache2/sites-available/
      - apache-sites-enabled:/etc/apache2/sites-enabled/
      - letsencrypt-certs:/etc/letsencrypt/
    profiles:
      - prod

  promtail:
    image: grafana/promtail:2.8.2
    volumes:
      - ./promtail:/etc/promtail
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers
    command: -config.file=/etc/promtail/config.yaml
    profiles:
      - promtail

  owmf-lambda-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: lambda-dev
    image: registry.gitlab.com/openetymologymap/osm-wikidata-map-framework/lambda-dev:${owmf_framework_image_tag:-latest}
    env_file:
      - .env
    ports:
      - "9000:8080"
    networks:
      - owmf-internal
    restart: unless-stopped
    volumes:
      - ./public:/var/task/html
      - ./app:/var/task/app
    profiles:
      - lambda-dev

  owmf-lambda-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: lambda-dev
    image: registry.gitlab.com/openetymologymap/osm-wikidata-map-framework/lambda:${owmf_framework_image_tag:-latest}
    env_file:
      - .env
    ports:
      - "9000:8080"
    networks:
      - owmf-internal
    restart: unless-stopped
    profiles:
      - lambda-prod

volumes:
  db-init-work-dir:
  airflow-postgres-db-volume:
  db-data:
  pgadmin-data:
  apache-sites-available:
  apache-sites-enabled:
  letsencrypt-certs:
  torrent-daemon-config:

networks:
  owmf-internal:
  airflow-internal:
  airflow-postgis-bridge:
  airflow-torrent-bridge:
  pgadmin-db-bridge:
