include:
  #  - template: Docker.gitlab-ci.yml
  #  - template: Security/DAST.gitlab-ci.yml # https://docs.gitlab.com/ee/user/application_security/dast/#dast-run-options
  - template: Security/SAST.gitlab-ci.yml # https://docs.gitlab.com/ee/user/application_security/sast/#configuration
  # - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml # https://docs.gitlab.com/ee/user/application_security/dependency_scanning/index.html#configuration
  # - template: Security/Secret-Detection.gitlab-ci.yml
  # - template: Security/Container-Scanning.gitlab-ci.yml

stages:
  - release
  #  - build
  - test
  #  - dast
  - build

gitlab_release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Creating release $CI_COMMIT_TAG"
  release:
    name: '$CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    description: "$(date '+%Y-%m-%d')"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+(\.\d+)*$/'
      when: on_success

next_js_build:
  stage: build
  image: node:22.2.0-alpine3.19
  script:
    - cd front-end
    - cp ../.env.example .env
    - echo "Building the app"
    - npm clean-install
    - npm run build
  artifacts:
    when: on_success
    access: all
    paths:
      - front-end
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+(\.\d+)*$/'
      exists:
        - front-end/package.json
      when: on_success
    - exists:
        - front-end/package.json
      when: manual