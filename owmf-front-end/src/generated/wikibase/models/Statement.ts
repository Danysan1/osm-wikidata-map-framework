/* tslint:disable */
/* eslint-disable */
/**
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StatementAllOf1 } from './StatementAllOf1';
import {
    StatementAllOf1FromJSON,
    StatementAllOf1FromJSONTyped,
    StatementAllOf1ToJSON,
} from './StatementAllOf1';
import type { StatementAllOf1Property } from './StatementAllOf1Property';
import {
    StatementAllOf1PropertyFromJSON,
    StatementAllOf1PropertyFromJSONTyped,
    StatementAllOf1PropertyToJSON,
} from './StatementAllOf1Property';
import type { StatementAllOf1Value } from './StatementAllOf1Value';
import {
    StatementAllOf1ValueFromJSON,
    StatementAllOf1ValueFromJSONTyped,
    StatementAllOf1ValueToJSON,
} from './StatementAllOf1Value';
import type { StatementAllOf2References } from './StatementAllOf2References';
import {
    StatementAllOf2ReferencesFromJSON,
    StatementAllOf2ReferencesFromJSONTyped,
    StatementAllOf2ReferencesToJSON,
} from './StatementAllOf2References';

/**
 * 
 * @export
 * @interface Statement
 */
export interface Statement {
    /**
     * The globally unique identifier for this Statement
     * @type {string}
     * @memberof Statement
     */
    readonly id?: string;
    /**
     * The rank of the Statement
     * @type {string}
     * @memberof Statement
     */
    rank?: StatementRankEnum;
    /**
     * 
     * @type {StatementAllOf1Property}
     * @memberof Statement
     */
    property?: StatementAllOf1Property;
    /**
     * 
     * @type {StatementAllOf1Value}
     * @memberof Statement
     */
    value?: StatementAllOf1Value;
    /**
     * 
     * @type {Array<StatementAllOf1>}
     * @memberof Statement
     */
    qualifiers?: Array<StatementAllOf1>;
    /**
     * 
     * @type {Array<StatementAllOf2References>}
     * @memberof Statement
     */
    references?: Array<StatementAllOf2References>;
}


/**
 * @export
 */
export const StatementRankEnum = {
    Deprecated: 'deprecated',
    Normal: 'normal',
    Preferred: 'preferred'
} as const;
export type StatementRankEnum = typeof StatementRankEnum[keyof typeof StatementRankEnum];


/**
 * Check if a given object implements the Statement interface.
 */
export function instanceOfStatement(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StatementFromJSON(json: any): Statement {
    return StatementFromJSONTyped(json, false);
}

export function StatementFromJSONTyped(json: any, ignoreDiscriminator: boolean): Statement {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'rank': !exists(json, 'rank') ? undefined : json['rank'],
        'property': !exists(json, 'property') ? undefined : StatementAllOf1PropertyFromJSON(json['property']),
        'value': !exists(json, 'value') ? undefined : StatementAllOf1ValueFromJSON(json['value']),
        'qualifiers': !exists(json, 'qualifiers') ? undefined : ((json['qualifiers'] as Array<any>).map(StatementAllOf1FromJSON)),
        'references': !exists(json, 'references') ? undefined : ((json['references'] as Array<any>).map(StatementAllOf2ReferencesFromJSON)),
    };
}

export function StatementToJSON(value?: Statement | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rank': value.rank,
        'property': StatementAllOf1PropertyToJSON(value.property),
        'value': StatementAllOf1ValueToJSON(value.value),
        'qualifiers': value.qualifiers === undefined ? undefined : ((value.qualifiers as Array<any>).map(StatementAllOf1ToJSON)),
        'references': value.references === undefined ? undefined : ((value.references as Array<any>).map(StatementAllOf2ReferencesToJSON)),
    };
}

