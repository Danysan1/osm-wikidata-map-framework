/* tslint:disable */
/* eslint-disable */
/**
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ItemStatementsValueInnerAllOf
 */
export interface ItemStatementsValueInnerAllOf {
    /**
     * The globally unique identifier for this Statement
     * @type {string}
     * @memberof ItemStatementsValueInnerAllOf
     */
    readonly id?: string;
    /**
     * The rank of the Statement
     * @type {string}
     * @memberof ItemStatementsValueInnerAllOf
     */
    rank?: ItemStatementsValueInnerAllOfRankEnum;
}


/**
 * @export
 */
export const ItemStatementsValueInnerAllOfRankEnum = {
    Deprecated: 'deprecated',
    Normal: 'normal',
    Preferred: 'preferred'
} as const;
export type ItemStatementsValueInnerAllOfRankEnum = typeof ItemStatementsValueInnerAllOfRankEnum[keyof typeof ItemStatementsValueInnerAllOfRankEnum];


/**
 * Check if a given object implements the ItemStatementsValueInnerAllOf interface.
 */
export function instanceOfItemStatementsValueInnerAllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemStatementsValueInnerAllOfFromJSON(json: any): ItemStatementsValueInnerAllOf {
    return ItemStatementsValueInnerAllOfFromJSONTyped(json, false);
}

export function ItemStatementsValueInnerAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemStatementsValueInnerAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'rank': !exists(json, 'rank') ? undefined : json['rank'],
    };
}

export function ItemStatementsValueInnerAllOfToJSON(value?: ItemStatementsValueInnerAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rank': value.rank,
    };
}

