/* tslint:disable */
/* eslint-disable */
/**
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StatementAllOf1Property } from './StatementAllOf1Property';
import {
    StatementAllOf1PropertyFromJSON,
    StatementAllOf1PropertyFromJSONTyped,
    StatementAllOf1PropertyToJSON,
} from './StatementAllOf1Property';
import type { StatementAllOf1Value } from './StatementAllOf1Value';
import {
    StatementAllOf1ValueFromJSON,
    StatementAllOf1ValueFromJSONTyped,
    StatementAllOf1ValueToJSON,
} from './StatementAllOf1Value';

/**
 * 
 * @export
 * @interface StatementAllOf1
 */
export interface StatementAllOf1 {
    /**
     * 
     * @type {StatementAllOf1Property}
     * @memberof StatementAllOf1
     */
    property?: StatementAllOf1Property;
    /**
     * 
     * @type {StatementAllOf1Value}
     * @memberof StatementAllOf1
     */
    value?: StatementAllOf1Value;
}

/**
 * Check if a given object implements the StatementAllOf1 interface.
 */
export function instanceOfStatementAllOf1(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StatementAllOf1FromJSON(json: any): StatementAllOf1 {
    return StatementAllOf1FromJSONTyped(json, false);
}

export function StatementAllOf1FromJSONTyped(json: any, ignoreDiscriminator: boolean): StatementAllOf1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'property': !exists(json, 'property') ? undefined : StatementAllOf1PropertyFromJSON(json['property']),
        'value': !exists(json, 'value') ? undefined : StatementAllOf1ValueFromJSON(json['value']),
    };
}

export function StatementAllOf1ToJSON(value?: StatementAllOf1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'property': StatementAllOf1PropertyToJSON(value.property),
        'value': StatementAllOf1ValueToJSON(value.value),
    };
}

