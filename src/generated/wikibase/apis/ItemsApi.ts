/* tslint:disable */
/* eslint-disable */
/**
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetItem200Response,
  GetItem400Response,
} from '../models';
import {
    GetItem200ResponseFromJSON,
    GetItem200ResponseToJSON,
    GetItem400ResponseFromJSON,
    GetItem400ResponseToJSON,
} from '../models';

export interface GetItemRequest {
    itemId: string;
    fields?: Array<GetItemFieldsEnum>;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
}

/**
 * 
 */
export class ItemsApi extends runtime.BaseAPI {

    /**
     * Retrieve a single Wikibase Item by ID
     */
    async getItemRaw(requestParameters: GetItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetItem200Response>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.fields) {
            queryParameters['_fields'] = requestParameters.fields.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch) {
            headerParameters['If-None-Match'] = requestParameters.ifNoneMatch.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.ifModifiedSince !== undefined && requestParameters.ifModifiedSince !== null) {
            headerParameters['If-Modified-Since'] = String(requestParameters.ifModifiedSince);
        }

        if (requestParameters.ifMatch) {
            headerParameters['If-Match'] = requestParameters.ifMatch.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.ifUnmodifiedSince !== undefined && requestParameters.ifUnmodifiedSince !== null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters.ifUnmodifiedSince);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/entities/items/{item_id}`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetItem200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a single Wikibase Item by ID
     */
    async getItem(requestParameters: GetItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetItem200Response> {
        const response = await this.getItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetItemFieldsEnum = {
    Type: 'type',
    Labels: 'labels',
    Descriptions: 'descriptions',
    Aliases: 'aliases',
    Statements: 'statements',
    Sitelinks: 'sitelinks'
} as const;
export type GetItemFieldsEnum = typeof GetItemFieldsEnum[keyof typeof GetItemFieldsEnum];
