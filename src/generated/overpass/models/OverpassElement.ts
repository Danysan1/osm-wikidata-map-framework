/* tslint:disable */
/* eslint-disable */
/**
 * Overpass API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OverpassElement
 */
export interface OverpassElement {
    /**
     * Type of the OpenStreetMap element
     * @type {string}
     * @memberof OverpassElement
     */
    type: OverpassElementTypeEnum;
    /**
     * ID (unique only within its osm_type) of the OpenStreetMap element
     * @type {number}
     * @memberof OverpassElement
     */
    id: number;
    /**
     * The key-value tags of the OpenStreetMap element
     * @type {object}
     * @memberof OverpassElement
     */
    tags?: object;
    /**
     * The members of the relation
     * @type {Array<object>}
     * @memberof OverpassElement
     */
    members?: Array<object>;
}


/**
 * @export
 */
export const OverpassElementTypeEnum = {
    Node: 'node',
    Way: 'way',
    Relation: 'relation'
} as const;
export type OverpassElementTypeEnum = typeof OverpassElementTypeEnum[keyof typeof OverpassElementTypeEnum];


/**
 * Check if a given object implements the OverpassElement interface.
 */
export function instanceOfOverpassElement(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function OverpassElementFromJSON(json: any): OverpassElement {
    return OverpassElementFromJSONTyped(json, false);
}

export function OverpassElementFromJSONTyped(json: any, ignoreDiscriminator: boolean): OverpassElement {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'id': json['id'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'members': !exists(json, 'members') ? undefined : json['members'],
    };
}

export function OverpassElementToJSON(value?: OverpassElement | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'id': value.id,
        'tags': value.tags,
        'members': value.members,
    };
}

