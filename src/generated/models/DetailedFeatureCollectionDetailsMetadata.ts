/* tslint:disable */
/* eslint-disable */
/**
 * OSM-Wikidata Map Framework API
 * Programmatically interact with a site based on OSM-Wikidata Map Framework
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DetailedFeatureCollectionDetailsMetadata
 */
export interface DetailedFeatureCollectionDetailsMetadata {
    /**
     * Total number of etymologies linked to the features
     * @type {number}
     * @memberof DetailedFeatureCollectionDetailsMetadata
     */
    etymologyCount?: number;
    /**
     * Wikidata SPARQL query used to fetch the features
     * @type {string}
     * @memberof DetailedFeatureCollectionDetailsMetadata
     */
    wikidataQuery?: string;
    /**
     * OverpassQL query used to fetch the features
     * @type {string}
     * @memberof DetailedFeatureCollectionDetailsMetadata
     */
    overpassQuery?: string;
}

/**
 * Check if a given object implements the DetailedFeatureCollectionDetailsMetadata interface.
 */
export function instanceOfDetailedFeatureCollectionDetailsMetadata(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DetailedFeatureCollectionDetailsMetadataFromJSON(json: any): DetailedFeatureCollectionDetailsMetadata {
    return DetailedFeatureCollectionDetailsMetadataFromJSONTyped(json, false);
}

export function DetailedFeatureCollectionDetailsMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): DetailedFeatureCollectionDetailsMetadata {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'etymologyCount': !exists(json, 'etymology_count') ? undefined : json['etymology_count'],
        'wikidataQuery': !exists(json, 'wikidata_query') ? undefined : json['wikidata_query'],
        'overpassQuery': !exists(json, 'overpass_query') ? undefined : json['overpass_query'],
    };
}

export function DetailedFeatureCollectionDetailsMetadataToJSON(value?: DetailedFeatureCollectionDetailsMetadata | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'etymology_count': value.etymologyCount,
        'wikidata_query': value.wikidataQuery,
        'overpass_query': value.overpassQuery,
    };
}

