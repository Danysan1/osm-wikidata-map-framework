/* tslint:disable */
/* eslint-disable */
/**
 * OSM-Wikidata Map Framework API
 * Programmatically interact with a site based on OSM-Wikidata Map Framework
 *
 * The version of the OpenAPI document: 1.13.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EtymologyDetails
 */
export interface EtymologyDetails {
    /**
     * Birth date of this item
     * @type {string}
     * @memberof EtymologyDetails
     */
    birthDate?: string;
    /**
     * Q-ID of the Wikidata element representing the country of this element
     * @type {string}
     * @memberof EtymologyDetails
     */
    countryID?: string;
    /**
     * Death date of this item
     * @type {string}
     * @memberof EtymologyDetails
     */
    deathDate?: string;
    /**
     * End date of this item
     * @type {string}
     * @memberof EtymologyDetails
     */
    endDate?: string;
    /**
     * Point in time where this event happened
     * @type {string}
     * @memberof EtymologyDetails
     */
    eventDate?: string;
    /**
     * Q-ID of the Wikidata element representing the gender of this element
     * @type {string}
     * @memberof EtymologyDetails
     */
    genderID?: string;
    /**
     * Q-ID of the Wikidata element representing the class this element is instance of
     * @type {string}
     * @memberof EtymologyDetails
     */
    instanceID?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EtymologyDetails
     */
    pictures?: Array<string>;
}

/**
 * Check if a given object implements the EtymologyDetails interface.
 */
export function instanceOfEtymologyDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EtymologyDetailsFromJSON(json: any): EtymologyDetails {
    return EtymologyDetailsFromJSONTyped(json, false);
}

export function EtymologyDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): EtymologyDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'birthDate': !exists(json, 'birth_date') ? undefined : json['birth_date'],
        'countryID': !exists(json, 'countryID') ? undefined : json['countryID'],
        'deathDate': !exists(json, 'death_date') ? undefined : json['death_date'],
        'endDate': !exists(json, 'end_date') ? undefined : json['end_date'],
        'eventDate': !exists(json, 'event_date') ? undefined : json['event_date'],
        'genderID': !exists(json, 'genderID') ? undefined : json['genderID'],
        'instanceID': !exists(json, 'instanceID') ? undefined : json['instanceID'],
        'pictures': !exists(json, 'pictures') ? undefined : json['pictures'],
    };
}

export function EtymologyDetailsToJSON(value?: EtymologyDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'birth_date': value.birthDate,
        'countryID': value.countryID,
        'death_date': value.deathDate,
        'end_date': value.endDate,
        'event_date': value.eventDate,
        'genderID': value.genderID,
        'instanceID': value.instanceID,
        'pictures': value.pictures,
    };
}

