/* tslint:disable */
/* eslint-disable */
/**
 * OSM-Wikidata Map Framework API
 * Programmatically interact with a site based on OSM-Wikidata Map Framework
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EtymologyFeatureAllOfProperties } from './EtymologyFeatureAllOfProperties';
import {
    EtymologyFeatureAllOfPropertiesFromJSON,
    EtymologyFeatureAllOfPropertiesFromJSONTyped,
    EtymologyFeatureAllOfPropertiesToJSON,
} from './EtymologyFeatureAllOfProperties';
import type { GeoJSONGeometry } from './GeoJSONGeometry';
import {
    GeoJSONGeometryFromJSON,
    GeoJSONGeometryFromJSONTyped,
    GeoJSONGeometryToJSON,
} from './GeoJSONGeometry';

/**
 * 
 * @export
 * @interface EtymologyFeatureAllOf
 */
export interface EtymologyFeatureAllOf {
    /**
     * 
     * @type {GeoJSONGeometry}
     * @memberof EtymologyFeatureAllOf
     */
    geometry?: GeoJSONGeometry;
    /**
     * 
     * @type {string}
     * @memberof EtymologyFeatureAllOf
     */
    id?: string;
    /**
     * 
     * @type {EtymologyFeatureAllOfProperties}
     * @memberof EtymologyFeatureAllOf
     */
    properties?: EtymologyFeatureAllOfProperties;
}

/**
 * Check if a given object implements the EtymologyFeatureAllOf interface.
 */
export function instanceOfEtymologyFeatureAllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EtymologyFeatureAllOfFromJSON(json: any): EtymologyFeatureAllOf {
    return EtymologyFeatureAllOfFromJSONTyped(json, false);
}

export function EtymologyFeatureAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): EtymologyFeatureAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'geometry': !exists(json, 'geometry') ? undefined : GeoJSONGeometryFromJSON(json['geometry']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'properties': !exists(json, 'properties') ? undefined : EtymologyFeatureAllOfPropertiesFromJSON(json['properties']),
    };
}

export function EtymologyFeatureAllOfToJSON(value?: EtymologyFeatureAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'geometry': GeoJSONGeometryToJSON(value.geometry),
        'id': value.id,
        'properties': EtymologyFeatureAllOfPropertiesToJSON(value.properties),
    };
}

