/* tslint:disable */
/* eslint-disable */
/**
 * OSM-Wikidata Map Framework API
 * Programmatically interact with a site based on OSM-Wikidata Map Framework
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Etymology } from './Etymology';
import {
    EtymologyFromJSON,
    EtymologyFromJSONTyped,
    EtymologyToJSON,
} from './Etymology';

/**
 * 
 * @export
 * @interface EtymologyFeatureProperties
 */
export interface EtymologyFeatureProperties {
    [key: string]: string | any;
    /**
     * Alternative names of the feature, separated by a semicolon
     * @type {string}
     * @memberof EtymologyFeatureProperties
     */
    alt_name?: string;
    /**
     * Name of the Wikimedia Commons category for this feature
     * @type {string}
     * @memberof EtymologyFeatureProperties
     */
    commons?: string;
    /**
     * Internal ID for this feature (unique within the request but may vary after OWMF DB updates)
     * @type {number}
     * @memberof EtymologyFeatureProperties
     */
    el_id?: number;
    /**
     * List of linked items that describe some aspect of this feature. Which aspect is represented depends on the configuration of this OWMF instance. Typically etymologies are sent as an array of Etymology objects. Both Mapbox GL and MapLibre GL stringify the array as JSON in some circumstances.
     * @type {Array<Etymology>}
     * @memberof EtymologyFeatureProperties
     */
    etymologies?: Array<Etymology>;
    /**
     * Whether OpenStreetMap is the original source of the geometry and names of this feature.
     * @type {boolean}
     * @memberof EtymologyFeatureProperties
     */
    from_osm?: boolean;
    /**
     * Whether Wikidata is the original source of the geometry and/or names of this feature.
     * @type {boolean}
     * @memberof EtymologyFeatureProperties
     */
    from_wikidata?: boolean;
    /**
     * Q-ID of the Wikidata entity this feature's geometry has been extracted from. This may or may not be the same as the Wikidata entity of this feature.
     * @type {string}
     * @memberof EtymologyFeatureProperties
     */
    from_wikidata_entity?: string;
    /**
     * P-ID of the Wikidata property that links from the source Wikidata entity to the geometry of this feature. This may represent a direct geo statement (ex. P625) or a statement with a geo qualifier (ex. P625 on P119, in this case P119 must be used).
     * @type {string}
     * @memberof EtymologyFeatureProperties
     */
    from_wikidata_prop?: string;
    /**
     * Localized name of the feature
     * @type {string}
     * @memberof EtymologyFeatureProperties
     */
    name?: string;
    /**
     * Localized description of the feature
     * @type {string}
     * @memberof EtymologyFeatureProperties
     */
    description?: string;
    /**
     * Official name of the feature
     * @type {string}
     * @memberof EtymologyFeatureProperties
     */
    official_name?: string;
    /**
     * Type of the OpenStreetMap element for this feature
     * @type {string}
     * @memberof EtymologyFeatureProperties
     */
    osm_type?: EtymologyFeaturePropertiesOsmTypeEnum;
    /**
     * ID (unique only within its osm_type) of the OpenStreetMap element for this feature
     * @type {number}
     * @memberof EtymologyFeatureProperties
     */
    osm_id?: number;
    /**
     * Title of a Wikimedia Commons picture for this feature
     * @type {string}
     * @memberof EtymologyFeatureProperties
     */
    picture?: string;
    /**
     * Textual name of the etymology
     * @type {string}
     * @memberof EtymologyFeatureProperties
     */
    text_etymology?: string;
    /**
     * Textual description of the etymology
     * @type {string}
     * @memberof EtymologyFeatureProperties
     */
    text_etymology_descr?: string;
    /**
     * Q-ID of the Wikidata entity for this feature
     * @type {string}
     * @memberof EtymologyFeatureProperties
     */
    wikidata?: string;
    /**
     * Q-ID of a duplicate Wikidata entity which represents this same feature (linked through owl:sameAs)
     * @type {string}
     * @memberof EtymologyFeatureProperties
     */
    wikidata_alias?: string;
    /**
     * Title of a Wikipedia page for this feature prefixed with its language code (<language>:<Page name>)
     * @type {string}
     * @memberof EtymologyFeatureProperties
     */
    wikipedia?: string;
}


/**
 * @export
 */
export const EtymologyFeaturePropertiesOsmTypeEnum = {
    Node: 'node',
    Way: 'way',
    Relation: 'relation'
} as const;
export type EtymologyFeaturePropertiesOsmTypeEnum = typeof EtymologyFeaturePropertiesOsmTypeEnum[keyof typeof EtymologyFeaturePropertiesOsmTypeEnum];


/**
 * Check if a given object implements the EtymologyFeatureProperties interface.
 */
export function instanceOfEtymologyFeatureProperties(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EtymologyFeaturePropertiesFromJSON(json: any): EtymologyFeatureProperties {
    return EtymologyFeaturePropertiesFromJSONTyped(json, false);
}

export function EtymologyFeaturePropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): EtymologyFeatureProperties {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
            ...json,
        'alt_name': !exists(json, 'alt_name') ? undefined : json['alt_name'],
        'commons': !exists(json, 'commons') ? undefined : json['commons'],
        'el_id': !exists(json, 'el_id') ? undefined : json['el_id'],
        'etymologies': !exists(json, 'etymologies') ? undefined : ((json['etymologies'] as Array<any>).map(EtymologyFromJSON)),
        'from_osm': !exists(json, 'from_osm') ? undefined : json['from_osm'],
        'from_wikidata': !exists(json, 'from_wikidata') ? undefined : json['from_wikidata'],
        'from_wikidata_entity': !exists(json, 'from_wikidata_entity') ? undefined : json['from_wikidata_entity'],
        'from_wikidata_prop': !exists(json, 'from_wikidata_prop') ? undefined : json['from_wikidata_prop'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'official_name': !exists(json, 'official_name') ? undefined : json['official_name'],
        'osm_type': !exists(json, 'osm_type') ? undefined : json['osm_type'],
        'osm_id': !exists(json, 'osm_id') ? undefined : json['osm_id'],
        'picture': !exists(json, 'picture') ? undefined : json['picture'],
        'text_etymology': !exists(json, 'text_etymology') ? undefined : json['text_etymology'],
        'text_etymology_descr': !exists(json, 'text_etymology_descr') ? undefined : json['text_etymology_descr'],
        'wikidata': !exists(json, 'wikidata') ? undefined : json['wikidata'],
        'wikidata_alias': !exists(json, 'wikidata_alias') ? undefined : json['wikidata_alias'],
        'wikipedia': !exists(json, 'wikipedia') ? undefined : json['wikipedia'],
    };
}

export function EtymologyFeaturePropertiesToJSON(value?: EtymologyFeatureProperties | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
            ...value,
        'alt_name': value.alt_name,
        'commons': value.commons,
        'el_id': value.el_id,
        'etymologies': value.etymologies === undefined ? undefined : ((value.etymologies as Array<any>).map(EtymologyToJSON)),
        'from_osm': value.from_osm,
        'from_wikidata': value.from_wikidata,
        'from_wikidata_entity': value.from_wikidata_entity,
        'from_wikidata_prop': value.from_wikidata_prop,
        'name': value.name,
        'description': value.description,
        'official_name': value.official_name,
        'osm_type': value.osm_type,
        'osm_id': value.osm_id,
        'picture': value.picture,
        'text_etymology': value.text_etymology,
        'text_etymology_descr': value.text_etymology_descr,
        'wikidata': value.wikidata,
        'wikidata_alias': value.wikidata_alias,
        'wikipedia': value.wikipedia,
    };
}

