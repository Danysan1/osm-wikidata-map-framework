/* tslint:disable */
/* eslint-disable */
/**
 * OSM-Wikidata Map Framework API
 * Programmatically interact with a site based on OSM-Wikidata Map Framework
 *
 * The version of the OpenAPI document: 1.13.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Etymology } from './Etymology';
import {
    EtymologyFromJSON,
    EtymologyFromJSONTyped,
    EtymologyToJSON,
} from './Etymology';

/**
 * 
 * @export
 * @interface EtymologyFeatureProperty
 */
export interface EtymologyFeatureProperty {
    /**
     * 
     * @type {string}
     * @memberof EtymologyFeatureProperty
     */
    alt_name?: string;
    /**
     * 
     * @type {string}
     * @memberof EtymologyFeatureProperty
     */
    commons?: string;
    /**
     * 
     * @type {number}
     * @memberof EtymologyFeatureProperty
     */
    el_id?: number;
    /**
     * 
     * @type {Array<Etymology>}
     * @memberof EtymologyFeatureProperty
     */
    etymologies: Array<Etymology>;
    /**
     * 
     * @type {boolean}
     * @memberof EtymologyFeatureProperty
     */
    from_osm?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EtymologyFeatureProperty
     */
    from_wikidata?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EtymologyFeatureProperty
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EtymologyFeatureProperty
     */
    official_name?: string;
    /**
     * 
     * @type {string}
     * @memberof EtymologyFeatureProperty
     */
    osm_type?: string;
    /**
     * 
     * @type {number}
     * @memberof EtymologyFeatureProperty
     */
    osm_id?: number;
    /**
     * 
     * @type {string}
     * @memberof EtymologyFeatureProperty
     */
    picture?: string;
    /**
     * 
     * @type {string}
     * @memberof EtymologyFeatureProperty
     */
    text_etymology?: string;
    /**
     * 
     * @type {string}
     * @memberof EtymologyFeatureProperty
     */
    text_etymology_descr?: string;
    /**
     * Q-ID of the Wikidata entity for this feature
     * @type {string}
     * @memberof EtymologyFeatureProperty
     */
    wikidata?: string;
    /**
     * 
     * @type {string}
     * @memberof EtymologyFeatureProperty
     */
    wikipedia?: string;
}

/**
 * Check if a given object implements the EtymologyFeatureProperty interface.
 */
export function instanceOfEtymologyFeatureProperty(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "etymologies" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function EtymologyFeaturePropertyFromJSON(json: any): EtymologyFeatureProperty {
    return EtymologyFeaturePropertyFromJSONTyped(json, false);
}

export function EtymologyFeaturePropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): EtymologyFeatureProperty {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'alt_name': !exists(json, 'alt_name') ? undefined : json['alt_name'],
        'commons': !exists(json, 'commons') ? undefined : json['commons'],
        'el_id': !exists(json, 'el_id') ? undefined : json['el_id'],
        'etymologies': ((json['etymologies'] as Array<any>).map(EtymologyFromJSON)),
        'from_osm': !exists(json, 'from_osm') ? undefined : json['from_osm'],
        'from_wikidata': !exists(json, 'from_wikidata') ? undefined : json['from_wikidata'],
        'name': json['name'],
        'official_name': !exists(json, 'official_name') ? undefined : json['official_name'],
        'osm_type': !exists(json, 'osm_type') ? undefined : json['osm_type'],
        'osm_id': !exists(json, 'osm_id') ? undefined : json['osm_id'],
        'picture': !exists(json, 'picture') ? undefined : json['picture'],
        'text_etymology': !exists(json, 'text_etymology') ? undefined : json['text_etymology'],
        'text_etymology_descr': !exists(json, 'text_etymology_descr') ? undefined : json['text_etymology_descr'],
        'wikidata': !exists(json, 'wikidata') ? undefined : json['wikidata'],
        'wikipedia': !exists(json, 'wikipedia') ? undefined : json['wikipedia'],
    };
}

export function EtymologyFeaturePropertyToJSON(value?: EtymologyFeatureProperty | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'alt_name': value.alt_name,
        'commons': value.commons,
        'el_id': value.el_id,
        'etymologies': ((value.etymologies as Array<any>).map(EtymologyToJSON)),
        'from_osm': value.from_osm,
        'from_wikidata': value.from_wikidata,
        'name': value.name,
        'official_name': value.official_name,
        'osm_type': value.osm_type,
        'osm_id': value.osm_id,
        'picture': value.picture,
        'text_etymology': value.text_etymology,
        'text_etymology_descr': value.text_etymology_descr,
        'wikidata': value.wikidata,
        'wikipedia': value.wikipedia,
    };
}

