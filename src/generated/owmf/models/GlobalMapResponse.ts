/* tslint:disable */
/* eslint-disable */
/**
 * OSM-Wikidata Map Framework API
 * Programmatically interact with a site based on OSM-Wikidata Map Framework
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GlobalMapFeature } from './GlobalMapFeature';
import {
    GlobalMapFeatureFromJSON,
    GlobalMapFeatureFromJSONTyped,
    GlobalMapFeatureToJSON,
} from './GlobalMapFeature';

/**
 * 
 * @export
 * @interface GlobalMapResponse
 */
export interface GlobalMapResponse {
    /**
     * 
     * @type {string}
     * @memberof GlobalMapResponse
     */
    type: GlobalMapResponseTypeEnum;
    /**
     * 
     * @type {Array<GlobalMapFeature>}
     * @memberof GlobalMapResponse
     */
    features: Array<GlobalMapFeature>;
    /**
     * 2D/3D bounding box of the feature[s], in the order minLon,minLat,maxLon,maxLat[,minAlt,maxAlt]
     * @type {Array<number>}
     * @memberof GlobalMapResponse
     */
    bbox?: Array<number>;
}


/**
 * @export
 */
export const GlobalMapResponseTypeEnum = {
    FeatureCollection: 'FeatureCollection'
} as const;
export type GlobalMapResponseTypeEnum = typeof GlobalMapResponseTypeEnum[keyof typeof GlobalMapResponseTypeEnum];


/**
 * Check if a given object implements the GlobalMapResponse interface.
 */
export function instanceOfGlobalMapResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "features" in value;

    return isInstance;
}

export function GlobalMapResponseFromJSON(json: any): GlobalMapResponse {
    return GlobalMapResponseFromJSONTyped(json, false);
}

export function GlobalMapResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GlobalMapResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'features': ((json['features'] as Array<any>).map(GlobalMapFeatureFromJSON)),
        'bbox': !exists(json, 'bbox') ? undefined : json['bbox'],
    };
}

export function GlobalMapResponseToJSON(value?: GlobalMapResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'features': ((value.features as Array<any>).map(GlobalMapFeatureToJSON)),
        'bbox': value.bbox,
    };
}

