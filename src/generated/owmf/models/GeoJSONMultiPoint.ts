/* tslint:disable */
/* eslint-disable */
/**
 * OSM-Wikidata Map Framework API
 * Programmatically interact with a site based on OSM-Wikidata Map Framework
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * GeoJSON geometry
 * @export
 * @interface GeoJSONMultiPoint
 */
export interface GeoJSONMultiPoint {
    /**
     * the geometry type
     * @type {string}
     * @memberof GeoJSONMultiPoint
     */
    type: GeoJSONMultiPointTypeEnum;
    /**
     * 
     * @type {Array<Array<number>>}
     * @memberof GeoJSONMultiPoint
     */
    coordinates?: Array<Array<number>>;
}


/**
 * @export
 */
export const GeoJSONMultiPointTypeEnum = {
    Point: 'Point',
    LineString: 'LineString',
    Polygon: 'Polygon',
    MultiPoint: 'MultiPoint',
    MultiLineString: 'MultiLineString',
    MultiPolygon: 'MultiPolygon',
    GeometryCollection: 'GeometryCollection'
} as const;
export type GeoJSONMultiPointTypeEnum = typeof GeoJSONMultiPointTypeEnum[keyof typeof GeoJSONMultiPointTypeEnum];


/**
 * Check if a given object implements the GeoJSONMultiPoint interface.
 */
export function instanceOfGeoJSONMultiPoint(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function GeoJSONMultiPointFromJSON(json: any): GeoJSONMultiPoint {
    return GeoJSONMultiPointFromJSONTyped(json, false);
}

export function GeoJSONMultiPointFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeoJSONMultiPoint {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'coordinates': !exists(json, 'coordinates') ? undefined : json['coordinates'],
    };
}

export function GeoJSONMultiPointToJSON(value?: GeoJSONMultiPoint | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'coordinates': value.coordinates,
    };
}

