/* tslint:disable */
/* eslint-disable */
/**
 * OSM-Wikidata Map Framework API
 * Programmatically interact with a site based on OSM-Wikidata Map Framework
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
     GeoJSONLineStringFromJSONTyped,
     GeoJSONMultiLineStringFromJSONTyped,
     GeoJSONMultiPointFromJSONTyped,
     GeoJSONMultiPolygonFromJSONTyped,
     GeoJSONPointFromJSONTyped,
     GeoJSONPolygonFromJSONTyped
} from './';

/**
 * GeoJSON geometry
 * @export
 * @interface GeoJSONGeometry
 */
export interface GeoJSONGeometry {
    /**
     * the geometry type
     * @type {string}
     * @memberof GeoJSONGeometry
     */
    type: GeoJSONGeometryTypeEnum;
}


/**
 * @export
 */
export const GeoJSONGeometryTypeEnum = {
    Point: 'Point',
    LineString: 'LineString',
    Polygon: 'Polygon',
    MultiPoint: 'MultiPoint',
    MultiLineString: 'MultiLineString',
    MultiPolygon: 'MultiPolygon',
    GeometryCollection: 'GeometryCollection'
} as const;
export type GeoJSONGeometryTypeEnum = typeof GeoJSONGeometryTypeEnum[keyof typeof GeoJSONGeometryTypeEnum];


/**
 * Check if a given object implements the GeoJSONGeometry interface.
 */
export function instanceOfGeoJSONGeometry(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function GeoJSONGeometryFromJSON(json: any): GeoJSONGeometry {
    return GeoJSONGeometryFromJSONTyped(json, false);
}

export function GeoJSONGeometryFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeoJSONGeometry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'GeoJSONLineString') {
            return GeoJSONLineStringFromJSONTyped(json, true);
        }
        if (json['type'] === 'GeoJSONMultiLineString') {
            return GeoJSONMultiLineStringFromJSONTyped(json, true);
        }
        if (json['type'] === 'GeoJSONMultiPoint') {
            return GeoJSONMultiPointFromJSONTyped(json, true);
        }
        if (json['type'] === 'GeoJSONMultiPolygon') {
            return GeoJSONMultiPolygonFromJSONTyped(json, true);
        }
        if (json['type'] === 'GeoJSONPoint') {
            return GeoJSONPointFromJSONTyped(json, true);
        }
        if (json['type'] === 'GeoJSONPolygon') {
            return GeoJSONPolygonFromJSONTyped(json, true);
        }
    }
    return {
        
        'type': json['type'],
    };
}

export function GeoJSONGeometryToJSON(value?: GeoJSONGeometry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
    };
}

