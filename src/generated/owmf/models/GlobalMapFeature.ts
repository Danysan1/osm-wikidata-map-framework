/* tslint:disable */
/* eslint-disable */
/**
 * OSM-Wikidata Map Framework API
 * Programmatically interact with a site based on OSM-Wikidata Map Framework
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GeoJSONFeatureGeometry } from './GeoJSONFeatureGeometry';
import {
    GeoJSONFeatureGeometryFromJSON,
    GeoJSONFeatureGeometryFromJSONTyped,
    GeoJSONFeatureGeometryToJSON,
} from './GeoJSONFeatureGeometry';
import type { GeoJSONFeatureID } from './GeoJSONFeatureID';
import {
    GeoJSONFeatureIDFromJSON,
    GeoJSONFeatureIDFromJSONTyped,
    GeoJSONFeatureIDToJSON,
} from './GeoJSONFeatureID';
import type { GlobalMapFeatureDetailsProperties } from './GlobalMapFeatureDetailsProperties';
import {
    GlobalMapFeatureDetailsPropertiesFromJSON,
    GlobalMapFeatureDetailsPropertiesFromJSONTyped,
    GlobalMapFeatureDetailsPropertiesToJSON,
} from './GlobalMapFeatureDetailsProperties';

/**
 * 
 * @export
 * @interface GlobalMapFeature
 */
export interface GlobalMapFeature {
    /**
     * 
     * @type {string}
     * @memberof GlobalMapFeature
     */
    type: GlobalMapFeatureTypeEnum;
    /**
     * 
     * @type {GeoJSONFeatureID}
     * @memberof GlobalMapFeature
     */
    id?: GeoJSONFeatureID;
    /**
     * 
     * @type {GeoJSONFeatureGeometry}
     * @memberof GlobalMapFeature
     */
    geometry: GeoJSONFeatureGeometry;
    /**
     * 
     * @type {GlobalMapFeatureDetailsProperties}
     * @memberof GlobalMapFeature
     */
    properties: GlobalMapFeatureDetailsProperties;
    /**
     * 2D/3D bounding box of the feature[s], in the order minLon,minLat,maxLon,maxLat[,minAlt,maxAlt]
     * @type {Array<number>}
     * @memberof GlobalMapFeature
     */
    bbox?: Array<number>;
}


/**
 * @export
 */
export const GlobalMapFeatureTypeEnum = {
    Feature: 'Feature'
} as const;
export type GlobalMapFeatureTypeEnum = typeof GlobalMapFeatureTypeEnum[keyof typeof GlobalMapFeatureTypeEnum];


/**
 * Check if a given object implements the GlobalMapFeature interface.
 */
export function instanceOfGlobalMapFeature(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "geometry" in value;
    isInstance = isInstance && "properties" in value;

    return isInstance;
}

export function GlobalMapFeatureFromJSON(json: any): GlobalMapFeature {
    return GlobalMapFeatureFromJSONTyped(json, false);
}

export function GlobalMapFeatureFromJSONTyped(json: any, ignoreDiscriminator: boolean): GlobalMapFeature {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'id': !exists(json, 'id') ? undefined : GeoJSONFeatureIDFromJSON(json['id']),
        'geometry': GeoJSONFeatureGeometryFromJSON(json['geometry']),
        'properties': GlobalMapFeatureDetailsPropertiesFromJSON(json['properties']),
        'bbox': !exists(json, 'bbox') ? undefined : json['bbox'],
    };
}

export function GlobalMapFeatureToJSON(value?: GlobalMapFeature | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'id': GeoJSONFeatureIDToJSON(value.id),
        'geometry': GeoJSONFeatureGeometryToJSON(value.geometry),
        'properties': GlobalMapFeatureDetailsPropertiesToJSON(value.properties),
        'bbox': value.bbox,
    };
}

