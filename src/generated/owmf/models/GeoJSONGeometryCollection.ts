/* tslint:disable */
/* eslint-disable */
/**
 * OSM-Wikidata Map Framework API
 * Programmatically interact with a site based on OSM-Wikidata Map Framework
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GeoJSONGeometry } from './GeoJSONGeometry';
import {
    GeoJSONGeometryFromJSON,
    GeoJSONGeometryFromJSONTyped,
    GeoJSONGeometryToJSON,
} from './GeoJSONGeometry';

/**
 * GeoJSON geometry collection
 * @export
 * @interface GeoJSONGeometryCollection
 */
export interface GeoJSONGeometryCollection {
    /**
     * 
     * @type {string}
     * @memberof GeoJSONGeometryCollection
     */
    type: GeoJSONGeometryCollectionTypeEnum;
    /**
     * 
     * @type {Array<GeoJSONGeometry>}
     * @memberof GeoJSONGeometryCollection
     */
    geometries: Array<GeoJSONGeometry>;
}


/**
 * @export
 */
export const GeoJSONGeometryCollectionTypeEnum = {
    GeometryCollection: 'GeometryCollection'
} as const;
export type GeoJSONGeometryCollectionTypeEnum = typeof GeoJSONGeometryCollectionTypeEnum[keyof typeof GeoJSONGeometryCollectionTypeEnum];


/**
 * Check if a given object implements the GeoJSONGeometryCollection interface.
 */
export function instanceOfGeoJSONGeometryCollection(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "geometries" in value;

    return isInstance;
}

export function GeoJSONGeometryCollectionFromJSON(json: any): GeoJSONGeometryCollection {
    return GeoJSONGeometryCollectionFromJSONTyped(json, false);
}

export function GeoJSONGeometryCollectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeoJSONGeometryCollection {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'geometries': ((json['geometries'] as Array<any>).map(GeoJSONGeometryFromJSON)),
    };
}

export function GeoJSONGeometryCollectionToJSON(value?: GeoJSONGeometryCollection | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'geometries': ((value.geometries as Array<any>).map(GeoJSONGeometryToJSON)),
    };
}

