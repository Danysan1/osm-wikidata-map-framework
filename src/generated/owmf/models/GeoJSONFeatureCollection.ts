/* tslint:disable */
/* eslint-disable */
/**
 * OSM-Wikidata Map Framework API
 * Programmatically interact with a site based on OSM-Wikidata Map Framework
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GeoJSONFeature } from './GeoJSONFeature';
import {
    GeoJSONFeatureFromJSON,
    GeoJSONFeatureFromJSONTyped,
    GeoJSONFeatureToJSON,
} from './GeoJSONFeature';

/**
 * GeoJSON Feature collection
 * @export
 * @interface GeoJSONFeatureCollection
 */
export interface GeoJSONFeatureCollection {
    /**
     * 
     * @type {string}
     * @memberof GeoJSONFeatureCollection
     */
    type: GeoJSONFeatureCollectionTypeEnum;
    /**
     * 
     * @type {Array<GeoJSONFeature>}
     * @memberof GeoJSONFeatureCollection
     */
    features: Array<GeoJSONFeature>;
    /**
     * 2D/3D bounding box of the feature[s], in the order minLon,minLat,maxLon,maxLat[,minAlt,maxAlt]
     * @type {Array<number>}
     * @memberof GeoJSONFeatureCollection
     */
    bbox?: Array<number>;
}


/**
 * @export
 */
export const GeoJSONFeatureCollectionTypeEnum = {
    FeatureCollection: 'FeatureCollection'
} as const;
export type GeoJSONFeatureCollectionTypeEnum = typeof GeoJSONFeatureCollectionTypeEnum[keyof typeof GeoJSONFeatureCollectionTypeEnum];


/**
 * Check if a given object implements the GeoJSONFeatureCollection interface.
 */
export function instanceOfGeoJSONFeatureCollection(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "features" in value;

    return isInstance;
}

export function GeoJSONFeatureCollectionFromJSON(json: any): GeoJSONFeatureCollection {
    return GeoJSONFeatureCollectionFromJSONTyped(json, false);
}

export function GeoJSONFeatureCollectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeoJSONFeatureCollection {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'features': ((json['features'] as Array<any>).map(GeoJSONFeatureFromJSON)),
        'bbox': !exists(json, 'bbox') ? undefined : json['bbox'],
    };
}

export function GeoJSONFeatureCollectionToJSON(value?: GeoJSONFeatureCollection | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'features': ((value.features as Array<any>).map(GeoJSONFeatureToJSON)),
        'bbox': value.bbox,
    };
}

