/* tslint:disable */
/* eslint-disable */
/**
 * SPARQL endpoint API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface QLeverResponse
 */
export interface QLeverResponse {
    /**
     * 
     * @type {string}
     * @memberof QLeverResponse
     */
    'query'?: string;
    /**
     * The result set
     * @type {Array<Array<string>>}
     * @memberof QLeverResponse
     */
    'res'?: Array<Array<string>>;
    /**
     * 
     * @type {number}
     * @memberof QLeverResponse
     */
    'resultSize'?: number;
    /**
     * 
     * @type {object}
     * @memberof QLeverResponse
     */
    'runtimeInformation'?: object;
    /**
     * The names of the columns in the result set (the variables selected in the query)
     * @type {Array<string>}
     * @memberof QLeverResponse
     */
    'selected'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof QLeverResponse
     */
    'status'?: string;
    /**
     * 
     * @type {object}
     * @memberof QLeverResponse
     */
    'time'?: object;
    /**
     * 
     * @type {Array<string>}
     * @memberof QLeverResponse
     */
    'warnings'?: Array<string>;
}
/**
 * In WDQS must be equal to \"sparql\". In QLever varies and specifies the source of the data.
 * @export
 * @enum {string}
 */

export const SparqlBackend = {
    Sparql: 'sparql',
    Wikidata: 'wikidata',
    OsmPlanet: 'osm-planet',
    OhmPlanet: 'ohm-planet'
} as const;

export type SparqlBackend = typeof SparqlBackend[keyof typeof SparqlBackend];


/**
 * 
 * @export
 * @interface SparqlResponse
 */
export interface SparqlResponse {
    /**
     * 
     * @type {SparqlResponseHead}
     * @memberof SparqlResponse
     */
    'head'?: SparqlResponseHead;
    /**
     * 
     * @type {SparqlResponseResults}
     * @memberof SparqlResponse
     */
    'results'?: SparqlResponseResults;
}
/**
 * 
 * @export
 * @interface SparqlResponseBindingValue
 */
export interface SparqlResponseBindingValue {
    /**
     * 
     * @type {string}
     * @memberof SparqlResponseBindingValue
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof SparqlResponseBindingValue
     */
    'value'?: string;
    /**
     * 
     * @type {string}
     * @memberof SparqlResponseBindingValue
     */
    'datatype'?: string;
    /**
     * 
     * @type {string}
     * @memberof SparqlResponseBindingValue
     */
    'xml:lang'?: string;
}
/**
 * 
 * @export
 * @interface SparqlResponseHead
 */
export interface SparqlResponseHead {
    /**
     * 
     * @type {Array<string>}
     * @memberof SparqlResponseHead
     */
    'vars'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SparqlResponseResults
 */
export interface SparqlResponseResults {
    /**
     * 
     * @type {Array<{ [key: string]: SparqlResponseBindingValue; }>}
     * @memberof SparqlResponseResults
     */
    'bindings'?: Array<{ [key: string]: SparqlResponseBindingValue; }>;
}

/**
 * SparqlApi - axios parameter creator
 * @export
 */
export const SparqlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Run SPARQL query via GET
         * @param {SparqlBackend} backend 
         * @param {string} query The SPARQL query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSparqlQuery: async (backend: SparqlBackend, query: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'backend' is not null or undefined
            assertParamExists('getSparqlQuery', 'backend', backend)
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getSparqlQuery', 'query', query)
            const localVarPath = `/{backend}`
                .replace(`{${"backend"}}`, encodeURIComponent(String(backend)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Run SPARQL query via POST
         * @param {SparqlBackend} backend 
         * @param {string} query The SPARQL query
         * @param {string} [format] The SPARQL query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSparqlQuery: async (backend: SparqlBackend, query: string, format?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'backend' is not null or undefined
            assertParamExists('postSparqlQuery', 'backend', backend)
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postSparqlQuery', 'query', query)
            const localVarPath = `/{backend}`
                .replace(`{${"backend"}}`, encodeURIComponent(String(backend)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (query !== undefined) { 
                localVarFormParams.set('query', query as any);
            }
    
            if (format !== undefined) { 
                localVarFormParams.set('format', format as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SparqlApi - functional programming interface
 * @export
 */
export const SparqlApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SparqlApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Run SPARQL query via GET
         * @param {SparqlBackend} backend 
         * @param {string} query The SPARQL query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSparqlQuery(backend: SparqlBackend, query: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparqlResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSparqlQuery(backend, query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SparqlApi.getSparqlQuery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Run SPARQL query via POST
         * @param {SparqlBackend} backend 
         * @param {string} query The SPARQL query
         * @param {string} [format] The SPARQL query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSparqlQuery(backend: SparqlBackend, query: string, format?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparqlResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSparqlQuery(backend, query, format, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SparqlApi.postSparqlQuery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SparqlApi - factory interface
 * @export
 */
export const SparqlApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SparqlApiFp(configuration)
    return {
        /**
         * 
         * @summary Run SPARQL query via GET
         * @param {SparqlBackend} backend 
         * @param {string} query The SPARQL query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSparqlQuery(backend: SparqlBackend, query: string, options?: any): AxiosPromise<SparqlResponse> {
            return localVarFp.getSparqlQuery(backend, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Run SPARQL query via POST
         * @param {SparqlBackend} backend 
         * @param {string} query The SPARQL query
         * @param {string} [format] The SPARQL query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSparqlQuery(backend: SparqlBackend, query: string, format?: string, options?: any): AxiosPromise<SparqlResponse> {
            return localVarFp.postSparqlQuery(backend, query, format, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SparqlApi - object-oriented interface
 * @export
 * @class SparqlApi
 * @extends {BaseAPI}
 */
export class SparqlApi extends BaseAPI {
    /**
     * 
     * @summary Run SPARQL query via GET
     * @param {SparqlBackend} backend 
     * @param {string} query The SPARQL query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparqlApi
     */
    public getSparqlQuery(backend: SparqlBackend, query: string, options?: RawAxiosRequestConfig) {
        return SparqlApiFp(this.configuration).getSparqlQuery(backend, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Run SPARQL query via POST
     * @param {SparqlBackend} backend 
     * @param {string} query The SPARQL query
     * @param {string} [format] The SPARQL query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparqlApi
     */
    public postSparqlQuery(backend: SparqlBackend, query: string, format?: string, options?: RawAxiosRequestConfig) {
        return SparqlApiFp(this.configuration).postSparqlQuery(backend, query, format, options).then((request) => request(this.axios, this.basePath));
    }
}



