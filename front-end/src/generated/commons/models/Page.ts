/* tslint:disable */
/* eslint-disable */
/**
 * Wikimedia Commons REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ImageInfoItem } from './ImageInfoItem';
import {
    ImageInfoItemFromJSON,
    ImageInfoItemFromJSONTyped,
    ImageInfoItemToJSON,
} from './ImageInfoItem';

/**
 * 
 * @export
 * @interface Page
 */
export interface Page {
    /**
     * 
     * @type {number}
     * @memberof Page
     */
    pageid?: number;
    /**
     * 
     * @type {number}
     * @memberof Page
     */
    ns?: number;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    imagerepository?: string;
    /**
     * 
     * @type {Array<ImageInfoItem>}
     * @memberof Page
     */
    imageinfo?: Array<ImageInfoItem>;
}

/**
 * Check if a given object implements the Page interface.
 */
export function instanceOfPage(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PageFromJSON(json: any): Page {
    return PageFromJSONTyped(json, false);
}

export function PageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Page {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pageid': !exists(json, 'pageid') ? undefined : json['pageid'],
        'ns': !exists(json, 'ns') ? undefined : json['ns'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'imagerepository': !exists(json, 'imagerepository') ? undefined : json['imagerepository'],
        'imageinfo': !exists(json, 'imageinfo') ? undefined : ((json['imageinfo'] as Array<any>).map(ImageInfoItemFromJSON)),
    };
}

export function PageToJSON(value?: Page | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'pageid': value.pageid,
        'ns': value.ns,
        'title': value.title,
        'imagerepository': value.imagerepository,
        'imageinfo': value.imageinfo === undefined ? undefined : ((value.imageinfo as Array<any>).map(ImageInfoItemToJSON)),
    };
}

