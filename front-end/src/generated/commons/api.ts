/* tslint:disable */
/* eslint-disable */
/**
 * Wikimedia Commons REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const ActionType = {
    Abusefiltercheckmatch: 'abusefiltercheckmatch',
    Abusefilterchecksyntax: 'abusefilterchecksyntax',
    Abusefilterevalexpression: 'abusefilterevalexpression',
    Abusefilterunblockautopromote: 'abusefilterunblockautopromote',
    Abuselogprivatedetails: 'abuselogprivatedetails',
    Acquiretempusername: 'acquiretempusername',
    Aggregategroups: 'aggregategroups',
    Antispoof: 'antispoof',
    Block: 'block',
    Centralauthtoken: 'centralauthtoken',
    Centralnoticecdncacheupdatebanner: 'centralnoticecdncacheupdatebanner',
    Centralnoticechoicedata: 'centralnoticechoicedata',
    Centralnoticequerycampaign: 'centralnoticequerycampaign',
    Changeauthenticationdata: 'changeauthenticationdata',
    Changecontentmodel: 'changecontentmodel',
    Checktoken: 'checktoken',
    CirrusConfigDump: 'cirrus-config-dump',
    CirrusMappingDump: 'cirrus-mapping-dump',
    CirrusProfilesDump: 'cirrus-profiles-dump',
    CirrusSettingsDump: 'cirrus-settings-dump',
    Clearhasmsg: 'clearhasmsg',
    Clientlogin: 'clientlogin',
    Compare: 'compare',
    Createaccount: 'createaccount',
    Createlocalaccount: 'createlocalaccount',
    Delete: 'delete',
    Deleteglobalaccount: 'deleteglobalaccount',
    Discussiontoolsedit: 'discussiontoolsedit',
    Discussiontoolsfindcomment: 'discussiontoolsfindcomment',
    Discussiontoolsgetsubscriptions: 'discussiontoolsgetsubscriptions',
    Discussiontoolssubscribe: 'discussiontoolssubscribe',
    Discussiontoolsthank: 'discussiontoolsthank',
    Echocreateevent: 'echocreateevent',
    Echomarkread: 'echomarkread',
    Echomarkseen: 'echomarkseen',
    Echomute: 'echomute',
    Edit: 'edit',
    Editmassmessagelist: 'editmassmessagelist',
    Emailuser: 'emailuser',
    Expandtemplates: 'expandtemplates',
    Featuredfeed: 'featuredfeed',
    Feedcontributions: 'feedcontributions',
    Feedrecentchanges: 'feedrecentchanges',
    Feedwatchlist: 'feedwatchlist',
    Filerevert: 'filerevert',
    Flickrblacklist: 'flickrblacklist',
    Flow: 'flow',
    FlowParsoidUtils: 'flow-parsoid-utils',
    Flowthank: 'flowthank',
    Globalblock: 'globalblock',
    Globalpreferenceoverrides: 'globalpreferenceoverrides',
    Globalpreferences: 'globalpreferences',
    Globaluserrights: 'globaluserrights',
    Groupreview: 'groupreview',
    Help: 'help',
    Imagerotate: 'imagerotate',
    Import: 'import',
    Jsonconfig: 'jsonconfig',
    Languagesearch: 'languagesearch',
    Linkaccount: 'linkaccount',
    Login: 'login',
    Logout: 'logout',
    Managetags: 'managetags',
    Markfortranslation: 'markfortranslation',
    Massmessage: 'massmessage',
    Mediadetection: 'mediadetection',
    Mergehistory: 'mergehistory',
    Move: 'move',
    Opensearch: 'opensearch',
    Options: 'options',
    Paraminfo: 'paraminfo',
    Parse: 'parse',
    Patrol: 'patrol',
    Protect: 'protect',
    Purge: 'purge',
    Query: 'query',
    Removeauthenticationdata: 'removeauthenticationdata',
    Resetpassword: 'resetpassword',
    Revisiondelete: 'revisiondelete',
    Rollback: 'rollback',
    Rsd: 'rsd',
    Searchtranslations: 'searchtranslations',
    Setglobalaccountstatus: 'setglobalaccountstatus',
    Setnotificationtimestamp: 'setnotificationtimestamp',
    Setpagelanguage: 'setpagelanguage',
    Shortenurl: 'shortenurl',
    Sitematrix: 'sitematrix',
    Spamblacklist: 'spamblacklist',
    Streamconfigs: 'streamconfigs',
    Strikevote: 'strikevote',
    Tag: 'tag',
    Templatedata: 'templatedata',
    Thank: 'thank',
    Titleblacklist: 'titleblacklist',
    Torblock: 'torblock',
    Transcodereset: 'transcodereset',
    Translationaids: 'translationaids',
    Translationreview: 'translationreview',
    Translationstats: 'translationstats',
    Ttmserver: 'ttmserver',
    Unblock: 'unblock',
    Undelete: 'undelete',
    Unlinkaccount: 'unlinkaccount',
    Upload: 'upload',
    Userrights: 'userrights',
    Validatepassword: 'validatepassword',
    Watch: 'watch',
    Wbavailablebadges: 'wbavailablebadges',
    Wbcheckconstraintparameters: 'wbcheckconstraintparameters',
    Wbcheckconstraints: 'wbcheckconstraints',
    Wbcreateclaim: 'wbcreateclaim',
    Wbcreateredirect: 'wbcreateredirect',
    Wbeditentity: 'wbeditentity',
    Wbformatentities: 'wbformatentities',
    Wbformatvalue: 'wbformatvalue',
    Wbgetclaims: 'wbgetclaims',
    Wbgetentities: 'wbgetentities',
    Wblinktitles: 'wblinktitles',
    Wbmergeitems: 'wbmergeitems',
    Wbparsevalue: 'wbparsevalue',
    Wbremoveclaims: 'wbremoveclaims',
    Wbremovequalifiers: 'wbremovequalifiers',
    Wbremovereferences: 'wbremovereferences',
    Wbsearchentities: 'wbsearchentities',
    Wbsetaliases: 'wbsetaliases',
    Wbsetclaim: 'wbsetclaim',
    Wbsetclaimvalue: 'wbsetclaimvalue',
    Wbsetdescription: 'wbsetdescription',
    Wbsetlabel: 'wbsetlabel',
    Wbsetqualifier: 'wbsetqualifier',
    Wbsetreference: 'wbsetreference',
    Wbsetsitelink: 'wbsetsitelink',
    WebappManifest: 'webapp-manifest',
    Webauthn: 'webauthn',
    Wikilove: 'wikilove'
} as const;

export type ActionType = typeof ActionType[keyof typeof ActionType];


/**
 * 
 * @export
 * @interface CommonsApiResponse
 */
export interface CommonsApiResponse {
    /**
     * 
     * @type {CommonsApiResponseQuery}
     * @memberof CommonsApiResponse
     */
    'query'?: CommonsApiResponseQuery;
}
/**
 * 
 * @export
 * @interface CommonsApiResponseQuery
 */
export interface CommonsApiResponseQuery {
    /**
     * 
     * @type {{ [key: string]: Page; }}
     * @memberof CommonsApiResponseQuery
     */
    'pages'?: { [key: string]: Page; };
}
/**
 * 
 * @export
 * @interface ExtMetadataItem
 */
export interface ExtMetadataItem {
    /**
     * 
     * @type {string}
     * @memberof ExtMetadataItem
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtMetadataItem
     */
    'value'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExtMetadataItem
     */
    'hidden'?: boolean;
}
/**
 * 
 * @export
 * @interface ImageInfoItem
 */
export interface ImageInfoItem {
    /**
     * 
     * @type {string}
     * @memberof ImageInfoItem
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageInfoItem
     */
    'user'?: string;
    /**
     * 
     * @type {number}
     * @memberof ImageInfoItem
     */
    'userid'?: number;
    /**
     * 
     * @type {number}
     * @memberof ImageInfoItem
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof ImageInfoItem
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof ImageInfoItem
     */
    'height'?: number;
    /**
     * 
     * @type {string}
     * @memberof ImageInfoItem
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageInfoItem
     */
    'descriptionurl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageInfoItem
     */
    'descriptionshorturl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageInfoItem
     */
    'mime'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageInfoItem
     */
    'mediatype'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageInfoItem
     */
    'mediaid'?: string;
    /**
     * 
     * @type {{ [key: string]: ExtMetadataItem; }}
     * @memberof ImageInfoItem
     */
    'extmetadata'?: { [key: string]: ExtMetadataItem; };
}
/**
 * 
 * @export
 * @interface Page
 */
export interface Page {
    /**
     * 
     * @type {number}
     * @memberof Page
     */
    'pageid'?: number;
    /**
     * 
     * @type {number}
     * @memberof Page
     */
    'ns'?: number;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    'imagerepository'?: string;
    /**
     * 
     * @type {Array<ImageInfoItem>}
     * @memberof Page
     */
    'imageinfo'?: Array<ImageInfoItem>;
}

/**
 * CommonsApi - axios parameter creator
 * @export
 */
export const CommonsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Execute a call to the API
         * @param {ActionType} action Which action to perform.
         * @param {string} [format] The format of the output.
         * @param {number} [maxlag] 
         * @param {string} [iiextmetadatafilter] 
         * @param {string} [iiprop] 
         * @param {string} [origin] When accessing the API using a cross-domain AJAX request (CORS), set this to the originating domain. This must be included in any pre-flight request, and therefore must be part of the request URI (not the POST body).
         * @param {string} [prop] 
         * @param {string} [titles] 
         * @param {string} [uselang] Language to use for message translations.
         * @param {string} [variant] Variant of the language. Only works if the base language supports variant conversion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCall: async (action: ActionType, format?: string, maxlag?: number, iiextmetadatafilter?: string, iiprop?: string, origin?: string, prop?: string, titles?: string, uselang?: string, variant?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'action' is not null or undefined
            assertParamExists('apiCall', 'action', action)
            const localVarPath = `/api.php`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxlag !== undefined) {
                localVarQueryParameter['maxlag'] = maxlag;
            }

            if (iiextmetadatafilter !== undefined) {
                localVarQueryParameter['iiextmetadatafilter'] = iiextmetadatafilter;
            }

            if (iiprop !== undefined) {
                localVarQueryParameter['iiprop'] = iiprop;
            }

            if (origin !== undefined) {
                localVarQueryParameter['origin'] = origin;
            }

            if (prop !== undefined) {
                localVarQueryParameter['prop'] = prop;
            }

            if (titles !== undefined) {
                localVarQueryParameter['titles'] = titles;
            }

            if (uselang !== undefined) {
                localVarQueryParameter['uselang'] = uselang;
            }

            if (variant !== undefined) {
                localVarQueryParameter['variant'] = variant;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommonsApi - functional programming interface
 * @export
 */
export const CommonsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommonsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Execute a call to the API
         * @param {ActionType} action Which action to perform.
         * @param {string} [format] The format of the output.
         * @param {number} [maxlag] 
         * @param {string} [iiextmetadatafilter] 
         * @param {string} [iiprop] 
         * @param {string} [origin] When accessing the API using a cross-domain AJAX request (CORS), set this to the originating domain. This must be included in any pre-flight request, and therefore must be part of the request URI (not the POST body).
         * @param {string} [prop] 
         * @param {string} [titles] 
         * @param {string} [uselang] Language to use for message translations.
         * @param {string} [variant] Variant of the language. Only works if the base language supports variant conversion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCall(action: ActionType, format?: string, maxlag?: number, iiextmetadatafilter?: string, iiprop?: string, origin?: string, prop?: string, titles?: string, uselang?: string, variant?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonsApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCall(action, format, maxlag, iiextmetadatafilter, iiprop, origin, prop, titles, uselang, variant, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonsApi.apiCall']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CommonsApi - factory interface
 * @export
 */
export const CommonsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommonsApiFp(configuration)
    return {
        /**
         * 
         * @summary Execute a call to the API
         * @param {ActionType} action Which action to perform.
         * @param {string} [format] The format of the output.
         * @param {number} [maxlag] 
         * @param {string} [iiextmetadatafilter] 
         * @param {string} [iiprop] 
         * @param {string} [origin] When accessing the API using a cross-domain AJAX request (CORS), set this to the originating domain. This must be included in any pre-flight request, and therefore must be part of the request URI (not the POST body).
         * @param {string} [prop] 
         * @param {string} [titles] 
         * @param {string} [uselang] Language to use for message translations.
         * @param {string} [variant] Variant of the language. Only works if the base language supports variant conversion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCall(action: ActionType, format?: string, maxlag?: number, iiextmetadatafilter?: string, iiprop?: string, origin?: string, prop?: string, titles?: string, uselang?: string, variant?: string, options?: any): AxiosPromise<CommonsApiResponse> {
            return localVarFp.apiCall(action, format, maxlag, iiextmetadatafilter, iiprop, origin, prop, titles, uselang, variant, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommonsApi - object-oriented interface
 * @export
 * @class CommonsApi
 * @extends {BaseAPI}
 */
export class CommonsApi extends BaseAPI {
    /**
     * 
     * @summary Execute a call to the API
     * @param {ActionType} action Which action to perform.
     * @param {string} [format] The format of the output.
     * @param {number} [maxlag] 
     * @param {string} [iiextmetadatafilter] 
     * @param {string} [iiprop] 
     * @param {string} [origin] When accessing the API using a cross-domain AJAX request (CORS), set this to the originating domain. This must be included in any pre-flight request, and therefore must be part of the request URI (not the POST body).
     * @param {string} [prop] 
     * @param {string} [titles] 
     * @param {string} [uselang] Language to use for message translations.
     * @param {string} [variant] Variant of the language. Only works if the base language supports variant conversion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonsApi
     */
    public apiCall(action: ActionType, format?: string, maxlag?: number, iiextmetadatafilter?: string, iiprop?: string, origin?: string, prop?: string, titles?: string, uselang?: string, variant?: string, options?: RawAxiosRequestConfig) {
        return CommonsApiFp(this.configuration).apiCall(action, format, maxlag, iiextmetadatafilter, iiprop, origin, prop, titles, uselang, variant, options).then((request) => request(this.axios, this.basePath));
    }
}



