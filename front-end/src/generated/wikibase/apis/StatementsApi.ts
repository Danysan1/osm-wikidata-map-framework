/* tslint:disable */
/* eslint-disable */
/**
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetItem400Response,
  Statement,
} from '../models';
import {
    GetItem400ResponseFromJSON,
    GetItem400ResponseToJSON,
    StatementFromJSON,
    StatementToJSON,
} from '../models';

export interface GetItemStatementRequest {
    itemId: string;
    statementId: string;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
}

export interface GetItemStatementsRequest {
    itemId: string;
    property?: string;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
}

export interface GetPropertyStatementRequest {
    propertyId: string;
    statementId: string;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
}

export interface GetPropertyStatementsRequest {
    propertyId: string;
    property?: string;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
}

export interface GetStatementRequest {
    statementId: string;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
}

/**
 * 
 */
export class StatementsApi extends runtime.BaseAPI {

    /**
     * This endpoint is also accessible through `/statements/{statement_id}`
     * Retrieve a single Statement from an Item
     */
    async getItemStatementRaw(requestParameters: GetItemStatementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Statement>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getItemStatement.');
        }

        if (requestParameters.statementId === null || requestParameters.statementId === undefined) {
            throw new runtime.RequiredError('statementId','Required parameter requestParameters.statementId was null or undefined when calling getItemStatement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch) {
            headerParameters['If-None-Match'] = requestParameters.ifNoneMatch.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.ifModifiedSince !== undefined && requestParameters.ifModifiedSince !== null) {
            headerParameters['If-Modified-Since'] = String(requestParameters.ifModifiedSince);
        }

        if (requestParameters.ifMatch) {
            headerParameters['If-Match'] = requestParameters.ifMatch.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.ifUnmodifiedSince !== undefined && requestParameters.ifUnmodifiedSince !== null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters.ifUnmodifiedSince);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/entities/items/{item_id}/statements/{statement_id}`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"statement_id"}}`, encodeURIComponent(String(requestParameters.statementId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatementFromJSON(jsonValue));
    }

    /**
     * This endpoint is also accessible through `/statements/{statement_id}`
     * Retrieve a single Statement from an Item
     */
    async getItemStatement(requestParameters: GetItemStatementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Statement> {
        const response = await this.getItemStatementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve Statements from an Item
     */
    async getItemStatementsRaw(requestParameters: GetItemStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: Array<Statement>; }>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getItemStatements.');
        }

        const queryParameters: any = {};

        if (requestParameters.property !== undefined) {
            queryParameters['property'] = requestParameters.property;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch) {
            headerParameters['If-None-Match'] = requestParameters.ifNoneMatch.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.ifModifiedSince !== undefined && requestParameters.ifModifiedSince !== null) {
            headerParameters['If-Modified-Since'] = String(requestParameters.ifModifiedSince);
        }

        if (requestParameters.ifMatch) {
            headerParameters['If-Match'] = requestParameters.ifMatch.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.ifUnmodifiedSince !== undefined && requestParameters.ifUnmodifiedSince !== null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters.ifUnmodifiedSince);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/entities/items/{item_id}/statements`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve Statements from an Item
     */
    async getItemStatements(requestParameters: GetItemStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: Array<Statement>; }> {
        const response = await this.getItemStatementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint is also accessible through `/statements/{statement_id}`
     * Retrieve a single Statement from a Property
     */
    async getPropertyStatementRaw(requestParameters: GetPropertyStatementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Statement>> {
        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling getPropertyStatement.');
        }

        if (requestParameters.statementId === null || requestParameters.statementId === undefined) {
            throw new runtime.RequiredError('statementId','Required parameter requestParameters.statementId was null or undefined when calling getPropertyStatement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch) {
            headerParameters['If-None-Match'] = requestParameters.ifNoneMatch.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.ifModifiedSince !== undefined && requestParameters.ifModifiedSince !== null) {
            headerParameters['If-Modified-Since'] = String(requestParameters.ifModifiedSince);
        }

        if (requestParameters.ifMatch) {
            headerParameters['If-Match'] = requestParameters.ifMatch.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.ifUnmodifiedSince !== undefined && requestParameters.ifUnmodifiedSince !== null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters.ifUnmodifiedSince);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/entities/properties/{property_id}/statements/{statement_id}`.replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters.propertyId))).replace(`{${"statement_id"}}`, encodeURIComponent(String(requestParameters.statementId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatementFromJSON(jsonValue));
    }

    /**
     * This endpoint is also accessible through `/statements/{statement_id}`
     * Retrieve a single Statement from a Property
     */
    async getPropertyStatement(requestParameters: GetPropertyStatementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Statement> {
        const response = await this.getPropertyStatementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve Statements from a Property
     */
    async getPropertyStatementsRaw(requestParameters: GetPropertyStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: Array<Statement>; }>> {
        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling getPropertyStatements.');
        }

        const queryParameters: any = {};

        if (requestParameters.property !== undefined) {
            queryParameters['property'] = requestParameters.property;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch) {
            headerParameters['If-None-Match'] = requestParameters.ifNoneMatch.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.ifModifiedSince !== undefined && requestParameters.ifModifiedSince !== null) {
            headerParameters['If-Modified-Since'] = String(requestParameters.ifModifiedSince);
        }

        if (requestParameters.ifMatch) {
            headerParameters['If-Match'] = requestParameters.ifMatch.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.ifUnmodifiedSince !== undefined && requestParameters.ifUnmodifiedSince !== null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters.ifUnmodifiedSince);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/entities/properties/{property_id}/statements`.replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve Statements from a Property
     */
    async getPropertyStatements(requestParameters: GetPropertyStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: Array<Statement>; }> {
        const response = await this.getPropertyStatementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint is also accessible through `/entities/items/{item_id}/statements/{statement_id}` and `/entities/properties/{property_id}/statements/{statement_id}`
     * Retrieve a single Statement
     */
    async getStatementRaw(requestParameters: GetStatementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Statement>> {
        if (requestParameters.statementId === null || requestParameters.statementId === undefined) {
            throw new runtime.RequiredError('statementId','Required parameter requestParameters.statementId was null or undefined when calling getStatement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch) {
            headerParameters['If-None-Match'] = requestParameters.ifNoneMatch.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.ifModifiedSince !== undefined && requestParameters.ifModifiedSince !== null) {
            headerParameters['If-Modified-Since'] = String(requestParameters.ifModifiedSince);
        }

        if (requestParameters.ifMatch) {
            headerParameters['If-Match'] = requestParameters.ifMatch.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.ifUnmodifiedSince !== undefined && requestParameters.ifUnmodifiedSince !== null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters.ifUnmodifiedSince);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/statements/{statement_id}`.replace(`{${"statement_id"}}`, encodeURIComponent(String(requestParameters.statementId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatementFromJSON(jsonValue));
    }

    /**
     * This endpoint is also accessible through `/entities/items/{item_id}/statements/{statement_id}` and `/entities/properties/{property_id}/statements/{statement_id}`
     * Retrieve a single Statement
     */
    async getStatement(requestParameters: GetStatementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Statement> {
        const response = await this.getStatementRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
