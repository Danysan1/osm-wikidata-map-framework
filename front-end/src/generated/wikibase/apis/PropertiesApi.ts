/* tslint:disable */
/* eslint-disable */
/**
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetItem400Response,
  GetProperty200Response,
} from '../models';
import {
    GetItem400ResponseFromJSON,
    GetItem400ResponseToJSON,
    GetProperty200ResponseFromJSON,
    GetProperty200ResponseToJSON,
} from '../models';

export interface GetPropertyRequest {
    propertyId: string;
    fields?: Array<GetPropertyFieldsEnum>;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
}

/**
 * 
 */
export class PropertiesApi extends runtime.BaseAPI {

    /**
     * Retrieve a single Wikibase Property by ID
     */
    async getPropertyRaw(requestParameters: GetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProperty200Response>> {
        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling getProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.fields) {
            queryParameters['_fields'] = requestParameters.fields.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch) {
            headerParameters['If-None-Match'] = requestParameters.ifNoneMatch.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.ifModifiedSince !== undefined && requestParameters.ifModifiedSince !== null) {
            headerParameters['If-Modified-Since'] = String(requestParameters.ifModifiedSince);
        }

        if (requestParameters.ifMatch) {
            headerParameters['If-Match'] = requestParameters.ifMatch.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.ifUnmodifiedSince !== undefined && requestParameters.ifUnmodifiedSince !== null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters.ifUnmodifiedSince);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/entities/properties/{property_id}`.replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProperty200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a single Wikibase Property by ID
     */
    async getProperty(requestParameters: GetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProperty200Response> {
        const response = await this.getPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetPropertyFieldsEnum = {
    Type: 'type',
    DataType: 'data-type',
    Labels: 'labels',
    Descriptions: 'descriptions',
    Aliases: 'aliases',
    Statements: 'statements'
} as const;
export type GetPropertyFieldsEnum = typeof GetPropertyFieldsEnum[keyof typeof GetPropertyFieldsEnum];
