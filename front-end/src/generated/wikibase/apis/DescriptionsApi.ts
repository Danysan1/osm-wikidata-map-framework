/* tslint:disable */
/* eslint-disable */
/**
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DescriptionsPatchSchema,
  EditSchema,
  ItemNotFoundSchema,
  ReplaceItemDescriptionRequest,
} from '../models/index';
import {
    DescriptionsPatchSchemaFromJSON,
    DescriptionsPatchSchemaToJSON,
    EditSchemaFromJSON,
    EditSchemaToJSON,
    ItemNotFoundSchemaFromJSON,
    ItemNotFoundSchemaToJSON,
    ReplaceItemDescriptionRequestFromJSON,
    ReplaceItemDescriptionRequestToJSON,
} from '../models/index';

export interface DeleteItemDescriptionRequest {
    itemId: string;
    languageCode: string;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
    editSchema?: EditSchema;
}

export interface DeletePropertyDescriptionRequest {
    propertyId: string;
    languageCode: string;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
    editSchema?: EditSchema;
}

export interface GetItemDescriptionRequest {
    itemId: string;
    languageCode: string;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
}

export interface GetItemDescriptionsRequest {
    itemId: string;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
}

export interface GetPropertyDescriptionRequest {
    propertyId: string;
    languageCode: string;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
}

export interface GetPropertyDescriptionsRequest {
    propertyId: string;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
}

export interface PatchItemDescriptionsRequest {
    itemId: string;
    descriptionsPatchSchema: DescriptionsPatchSchema;
    ifMatch?: Array<string>;
    ifNoneMatch?: Array<string>;
    ifUnmodifiedSince?: string;
}

export interface PatchPropertyDescriptionsRequest {
    propertyId: string;
    descriptionsPatchSchema: DescriptionsPatchSchema;
    ifMatch?: Array<string>;
    ifNoneMatch?: Array<string>;
    ifUnmodifiedSince?: string;
}

export interface ReplaceItemDescriptionOperationRequest {
    itemId: string;
    languageCode: string;
    replaceItemDescriptionRequest: ReplaceItemDescriptionRequest;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
}

export interface ReplacePropertyDescriptionRequest {
    propertyId: string;
    languageCode: string;
    replaceItemDescriptionRequest: ReplaceItemDescriptionRequest;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
}

/**
 * 
 */
export class DescriptionsApi extends runtime.BaseAPI {

    /**
     * Delete an Item\'s description in a specific language
     */
    async deleteItemDescriptionRaw(requestParameters: DeleteItemDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling deleteItemDescription().'
            );
        }

        if (requestParameters['languageCode'] == null) {
            throw new runtime.RequiredError(
                'languageCode',
                'Required parameter "languageCode" was null or undefined when calling deleteItemDescription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = requestParameters['ifNoneMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifModifiedSince'] != null) {
            headerParameters['If-Modified-Since'] = String(requestParameters['ifModifiedSince']);
        }

        if (requestParameters['ifMatch'] != null) {
            headerParameters['If-Match'] = requestParameters['ifMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifUnmodifiedSince'] != null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters['ifUnmodifiedSince']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/entities/items/{item_id}/descriptions/{language_code}`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters['itemId']))).replace(`{${"language_code"}}`, encodeURIComponent(String(requestParameters['languageCode']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: EditSchemaToJSON(requestParameters['editSchema']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete an Item\'s description in a specific language
     */
    async deleteItemDescription(requestParameters: DeleteItemDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteItemDescriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a Property\'s description in a specific language
     */
    async deletePropertyDescriptionRaw(requestParameters: DeletePropertyDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling deletePropertyDescription().'
            );
        }

        if (requestParameters['languageCode'] == null) {
            throw new runtime.RequiredError(
                'languageCode',
                'Required parameter "languageCode" was null or undefined when calling deletePropertyDescription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = requestParameters['ifNoneMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifModifiedSince'] != null) {
            headerParameters['If-Modified-Since'] = String(requestParameters['ifModifiedSince']);
        }

        if (requestParameters['ifMatch'] != null) {
            headerParameters['If-Match'] = requestParameters['ifMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifUnmodifiedSince'] != null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters['ifUnmodifiedSince']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/entities/properties/{property_id}/descriptions/{language_code}`.replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"language_code"}}`, encodeURIComponent(String(requestParameters['languageCode']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: EditSchemaToJSON(requestParameters['editSchema']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete a Property\'s description in a specific language
     */
    async deletePropertyDescription(requestParameters: DeletePropertyDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deletePropertyDescriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an Item\'s description in a specific language
     */
    async getItemDescriptionRaw(requestParameters: GetItemDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling getItemDescription().'
            );
        }

        if (requestParameters['languageCode'] == null) {
            throw new runtime.RequiredError(
                'languageCode',
                'Required parameter "languageCode" was null or undefined when calling getItemDescription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = requestParameters['ifNoneMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifModifiedSince'] != null) {
            headerParameters['If-Modified-Since'] = String(requestParameters['ifModifiedSince']);
        }

        if (requestParameters['ifMatch'] != null) {
            headerParameters['If-Match'] = requestParameters['ifMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifUnmodifiedSince'] != null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters['ifUnmodifiedSince']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/entities/items/{item_id}/descriptions/{language_code}`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters['itemId']))).replace(`{${"language_code"}}`, encodeURIComponent(String(requestParameters['languageCode']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Retrieve an Item\'s description in a specific language
     */
    async getItemDescription(requestParameters: GetItemDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getItemDescriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an Item\'s descriptions
     */
    async getItemDescriptionsRaw(requestParameters: GetItemDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling getItemDescriptions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = requestParameters['ifNoneMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifModifiedSince'] != null) {
            headerParameters['If-Modified-Since'] = String(requestParameters['ifModifiedSince']);
        }

        if (requestParameters['ifMatch'] != null) {
            headerParameters['If-Match'] = requestParameters['ifMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifUnmodifiedSince'] != null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters['ifUnmodifiedSince']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/entities/items/{item_id}/descriptions`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve an Item\'s descriptions
     */
    async getItemDescriptions(requestParameters: GetItemDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.getItemDescriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a Property\'s description in a specific language
     */
    async getPropertyDescriptionRaw(requestParameters: GetPropertyDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling getPropertyDescription().'
            );
        }

        if (requestParameters['languageCode'] == null) {
            throw new runtime.RequiredError(
                'languageCode',
                'Required parameter "languageCode" was null or undefined when calling getPropertyDescription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = requestParameters['ifNoneMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifModifiedSince'] != null) {
            headerParameters['If-Modified-Since'] = String(requestParameters['ifModifiedSince']);
        }

        if (requestParameters['ifMatch'] != null) {
            headerParameters['If-Match'] = requestParameters['ifMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifUnmodifiedSince'] != null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters['ifUnmodifiedSince']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/entities/properties/{property_id}/descriptions/{language_code}`.replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"language_code"}}`, encodeURIComponent(String(requestParameters['languageCode']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Retrieve a Property\'s description in a specific language
     */
    async getPropertyDescription(requestParameters: GetPropertyDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getPropertyDescriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a Property\'s descriptions
     */
    async getPropertyDescriptionsRaw(requestParameters: GetPropertyDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling getPropertyDescriptions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = requestParameters['ifNoneMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifModifiedSince'] != null) {
            headerParameters['If-Modified-Since'] = String(requestParameters['ifModifiedSince']);
        }

        if (requestParameters['ifMatch'] != null) {
            headerParameters['If-Match'] = requestParameters['ifMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifUnmodifiedSince'] != null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters['ifUnmodifiedSince']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/entities/properties/{property_id}/descriptions`.replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve a Property\'s descriptions
     */
    async getPropertyDescriptions(requestParameters: GetPropertyDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.getPropertyDescriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change an Item\'s descriptions
     */
    async patchItemDescriptionsRaw(requestParameters: PatchItemDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling patchItemDescriptions().'
            );
        }

        if (requestParameters['descriptionsPatchSchema'] == null) {
            throw new runtime.RequiredError(
                'descriptionsPatchSchema',
                'Required parameter "descriptionsPatchSchema" was null or undefined when calling patchItemDescriptions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters['ifMatch'] != null) {
            headerParameters['If-Match'] = requestParameters['ifMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = requestParameters['ifNoneMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifUnmodifiedSince'] != null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters['ifUnmodifiedSince']);
        }

        const response = await this.request({
            path: `/entities/items/{item_id}/descriptions`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DescriptionsPatchSchemaToJSON(requestParameters['descriptionsPatchSchema']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Change an Item\'s descriptions
     */
    async patchItemDescriptions(requestParameters: PatchItemDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.patchItemDescriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change a Property\'s descriptions
     */
    async patchPropertyDescriptionsRaw(requestParameters: PatchPropertyDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling patchPropertyDescriptions().'
            );
        }

        if (requestParameters['descriptionsPatchSchema'] == null) {
            throw new runtime.RequiredError(
                'descriptionsPatchSchema',
                'Required parameter "descriptionsPatchSchema" was null or undefined when calling patchPropertyDescriptions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters['ifMatch'] != null) {
            headerParameters['If-Match'] = requestParameters['ifMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = requestParameters['ifNoneMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifUnmodifiedSince'] != null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters['ifUnmodifiedSince']);
        }

        const response = await this.request({
            path: `/entities/properties/{property_id}/descriptions`.replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DescriptionsPatchSchemaToJSON(requestParameters['descriptionsPatchSchema']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Change a Property\'s descriptions
     */
    async patchPropertyDescriptions(requestParameters: PatchPropertyDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.patchPropertyDescriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add / Replace an Item\'s description in a specific language
     */
    async replaceItemDescriptionRaw(requestParameters: ReplaceItemDescriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling replaceItemDescription().'
            );
        }

        if (requestParameters['languageCode'] == null) {
            throw new runtime.RequiredError(
                'languageCode',
                'Required parameter "languageCode" was null or undefined when calling replaceItemDescription().'
            );
        }

        if (requestParameters['replaceItemDescriptionRequest'] == null) {
            throw new runtime.RequiredError(
                'replaceItemDescriptionRequest',
                'Required parameter "replaceItemDescriptionRequest" was null or undefined when calling replaceItemDescription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = requestParameters['ifNoneMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifModifiedSince'] != null) {
            headerParameters['If-Modified-Since'] = String(requestParameters['ifModifiedSince']);
        }

        if (requestParameters['ifMatch'] != null) {
            headerParameters['If-Match'] = requestParameters['ifMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifUnmodifiedSince'] != null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters['ifUnmodifiedSince']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/entities/items/{item_id}/descriptions/{language_code}`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters['itemId']))).replace(`{${"language_code"}}`, encodeURIComponent(String(requestParameters['languageCode']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReplaceItemDescriptionRequestToJSON(requestParameters['replaceItemDescriptionRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Add / Replace an Item\'s description in a specific language
     */
    async replaceItemDescription(requestParameters: ReplaceItemDescriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.replaceItemDescriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add / Replace a Property\'s description in a specific language
     */
    async replacePropertyDescriptionRaw(requestParameters: ReplacePropertyDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling replacePropertyDescription().'
            );
        }

        if (requestParameters['languageCode'] == null) {
            throw new runtime.RequiredError(
                'languageCode',
                'Required parameter "languageCode" was null or undefined when calling replacePropertyDescription().'
            );
        }

        if (requestParameters['replaceItemDescriptionRequest'] == null) {
            throw new runtime.RequiredError(
                'replaceItemDescriptionRequest',
                'Required parameter "replaceItemDescriptionRequest" was null or undefined when calling replacePropertyDescription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = requestParameters['ifNoneMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifModifiedSince'] != null) {
            headerParameters['If-Modified-Since'] = String(requestParameters['ifModifiedSince']);
        }

        if (requestParameters['ifMatch'] != null) {
            headerParameters['If-Match'] = requestParameters['ifMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifUnmodifiedSince'] != null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters['ifUnmodifiedSince']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/entities/properties/{property_id}/descriptions/{language_code}`.replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"language_code"}}`, encodeURIComponent(String(requestParameters['languageCode']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReplaceItemDescriptionRequestToJSON(requestParameters['replaceItemDescriptionRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Add / Replace a Property\'s description in a specific language
     */
    async replacePropertyDescription(requestParameters: ReplacePropertyDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.replacePropertyDescriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
