/* tslint:disable */
/* eslint-disable */
/**
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Sitelink } from './Sitelink';
import {
    SitelinkFromJSON,
    SitelinkFromJSONTyped,
    SitelinkToJSON,
} from './Sitelink';
import type { Statement } from './Statement';
import {
    StatementFromJSON,
    StatementFromJSONTyped,
    StatementToJSON,
} from './Statement';

/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    type?: string;
    /**
     * 
     * @type {any}
     * @memberof Item
     */
    labels?: any;
    /**
     * 
     * @type {any}
     * @memberof Item
     */
    descriptions?: any;
    /**
     * 
     * @type {any}
     * @memberof Item
     */
    aliases?: any;
    /**
     * 
     * @type {{ [key: string]: Sitelink; }}
     * @memberof Item
     */
    sitelinks?: { [key: string]: Sitelink; };
    /**
     * 
     * @type {{ [key: string]: Array<Statement>; }}
     * @memberof Item
     */
    statements?: { [key: string]: Array<Statement>; };
}

/**
 * Check if a given object implements the Item interface.
 */
export function instanceOfItem(value: object): value is Item {
    return true;
}

export function ItemFromJSON(json: any): Item {
    return ItemFromJSONTyped(json, false);
}

export function ItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): Item {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'] == null ? undefined : json['type'],
        'labels': json['labels'] == null ? undefined : json['labels'],
        'descriptions': json['descriptions'] == null ? undefined : json['descriptions'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'sitelinks': json['sitelinks'] == null ? undefined : (mapValues(json['sitelinks'], SitelinkFromJSON)),
        'statements': json['statements'] == null ? undefined : json['statements'],
    };
}

export function ItemToJSON(value?: Item | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'type': value['type'],
        'labels': value['labels'],
        'descriptions': value['descriptions'],
        'aliases': value['aliases'],
        'sitelinks': value['sitelinks'] == null ? undefined : (mapValues(value['sitelinks'], SitelinkToJSON)),
        'statements': value['statements'],
    };
}

