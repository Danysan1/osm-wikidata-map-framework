/* tslint:disable */
/* eslint-disable */
/**
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ItemStatementsValueInnerAllOf1Value
 */
export interface ItemStatementsValueInnerAllOf1Value {
    /**
     * The value, if type == "value", otherwise omitted
     * @type {any}
     * @memberof ItemStatementsValueInnerAllOf1Value
     */
    content?: any | null;
    /**
     * The value type
     * @type {string}
     * @memberof ItemStatementsValueInnerAllOf1Value
     */
    type?: ItemStatementsValueInnerAllOf1ValueTypeEnum;
}


/**
 * @export
 */
export const ItemStatementsValueInnerAllOf1ValueTypeEnum = {
    Value: 'value',
    Somevalue: 'somevalue',
    Novalue: 'novalue'
} as const;
export type ItemStatementsValueInnerAllOf1ValueTypeEnum = typeof ItemStatementsValueInnerAllOf1ValueTypeEnum[keyof typeof ItemStatementsValueInnerAllOf1ValueTypeEnum];


/**
 * Check if a given object implements the ItemStatementsValueInnerAllOf1Value interface.
 */
export function instanceOfItemStatementsValueInnerAllOf1Value(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemStatementsValueInnerAllOf1ValueFromJSON(json: any): ItemStatementsValueInnerAllOf1Value {
    return ItemStatementsValueInnerAllOf1ValueFromJSONTyped(json, false);
}

export function ItemStatementsValueInnerAllOf1ValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemStatementsValueInnerAllOf1Value {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'content': !exists(json, 'content') ? undefined : json['content'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function ItemStatementsValueInnerAllOf1ValueToJSON(value?: ItemStatementsValueInnerAllOf1Value | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'content': value.content,
        'type': value.type,
    };
}

