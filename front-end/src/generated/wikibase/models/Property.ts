/* tslint:disable */
/* eslint-disable */
/**
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PropertyStatementsValueInner } from './PropertyStatementsValueInner';
import {
    PropertyStatementsValueInnerFromJSON,
    PropertyStatementsValueInnerFromJSONTyped,
    PropertyStatementsValueInnerToJSON,
} from './PropertyStatementsValueInner';

/**
 * 
 * @export
 * @interface Property
 */
export interface Property {
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    data_type?: string;
    /**
     * 
     * @type {any}
     * @memberof Property
     */
    labels?: any;
    /**
     * 
     * @type {any}
     * @memberof Property
     */
    descriptions?: any;
    /**
     * 
     * @type {any}
     * @memberof Property
     */
    aliases?: any;
    /**
     * 
     * @type {{ [key: string]: Array<PropertyStatementsValueInner>; }}
     * @memberof Property
     */
    statements?: { [key: string]: Array<PropertyStatementsValueInner>; };
}

/**
 * Check if a given object implements the Property interface.
 */
export function instanceOfProperty(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PropertyFromJSON(json: any): Property {
    return PropertyFromJSONTyped(json, false);
}

export function PropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Property {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'data_type': !exists(json, 'data-type') ? undefined : json['data-type'],
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'descriptions': !exists(json, 'descriptions') ? undefined : json['descriptions'],
        'aliases': !exists(json, 'aliases') ? undefined : json['aliases'],
        'statements': !exists(json, 'statements') ? undefined : json['statements'],
    };
}

export function PropertyToJSON(value?: Property | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'data-type': value.data_type,
        'labels': value.labels,
        'descriptions': value.descriptions,
        'aliases': value.aliases,
        'statements': value.statements,
    };
}

