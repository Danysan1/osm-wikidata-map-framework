/* tslint:disable */
/* eslint-disable */
/**
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QualifierProperty } from './QualifierProperty';
import {
    QualifierPropertyFromJSON,
    QualifierPropertyFromJSONTyped,
    QualifierPropertyToJSON,
} from './QualifierProperty';
import type { Reference } from './Reference';
import {
    ReferenceFromJSON,
    ReferenceFromJSONTyped,
    ReferenceToJSON,
} from './Reference';
import type { QualifierValue } from './QualifierValue';
import {
    QualifierValueFromJSON,
    QualifierValueFromJSONTyped,
    QualifierValueToJSON,
} from './QualifierValue';
import type { Qualifier } from './Qualifier';
import {
    QualifierFromJSON,
    QualifierFromJSONTyped,
    QualifierToJSON,
} from './Qualifier';

/**
 * 
 * @export
 * @interface Statement
 */
export interface Statement {
    /**
     * 
     * @type {QualifierProperty}
     * @memberof Statement
     */
    property?: QualifierProperty;
    /**
     * 
     * @type {QualifierValue}
     * @memberof Statement
     */
    value?: QualifierValue;
    /**
     * The globally unique identifier for this Statement
     * @type {string}
     * @memberof Statement
     */
    readonly id?: string;
    /**
     * The rank of the Statement
     * @type {string}
     * @memberof Statement
     */
    rank?: StatementRankEnum;
    /**
     * 
     * @type {Array<Qualifier>}
     * @memberof Statement
     */
    qualifiers?: Array<Qualifier>;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof Statement
     */
    references?: Array<Reference>;
}


/**
 * @export
 */
export const StatementRankEnum = {
    Deprecated: 'deprecated',
    Normal: 'normal',
    Preferred: 'preferred'
} as const;
export type StatementRankEnum = typeof StatementRankEnum[keyof typeof StatementRankEnum];


/**
 * Check if a given object implements the Statement interface.
 */
export function instanceOfStatement(value: object): value is Statement {
    return true;
}

export function StatementFromJSON(json: any): Statement {
    return StatementFromJSONTyped(json, false);
}

export function StatementFromJSONTyped(json: any, ignoreDiscriminator: boolean): Statement {
    if (json == null) {
        return json;
    }
    return {
        
        'property': json['property'] == null ? undefined : QualifierPropertyFromJSON(json['property']),
        'value': json['value'] == null ? undefined : QualifierValueFromJSON(json['value']),
        'id': json['id'] == null ? undefined : json['id'],
        'rank': json['rank'] == null ? undefined : json['rank'],
        'qualifiers': json['qualifiers'] == null ? undefined : ((json['qualifiers'] as Array<any>).map(QualifierFromJSON)),
        'references': json['references'] == null ? undefined : ((json['references'] as Array<any>).map(ReferenceFromJSON)),
    };
}

export function StatementToJSON(value?: Omit<Statement, 'id'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'property': QualifierPropertyToJSON(value['property']),
        'value': QualifierValueToJSON(value['value']),
        'rank': value['rank'],
        'qualifiers': value['qualifiers'] == null ? undefined : ((value['qualifiers'] as Array<any>).map(QualifierToJSON)),
        'references': value['references'] == null ? undefined : ((value['references'] as Array<any>).map(ReferenceToJSON)),
    };
}

