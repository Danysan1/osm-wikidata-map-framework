/* tslint:disable */
/* eslint-disable */
/**
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StatementAllOf1 } from './StatementAllOf1';
import {
    StatementAllOf1FromJSON,
    StatementAllOf1FromJSONTyped,
    StatementAllOf1ToJSON,
} from './StatementAllOf1';
import type { StatementAllOf2References } from './StatementAllOf2References';
import {
    StatementAllOf2ReferencesFromJSON,
    StatementAllOf2ReferencesFromJSONTyped,
    StatementAllOf2ReferencesToJSON,
} from './StatementAllOf2References';

/**
 * 
 * @export
 * @interface StatementAllOf2
 */
export interface StatementAllOf2 {
    /**
     * 
     * @type {Array<StatementAllOf1>}
     * @memberof StatementAllOf2
     */
    qualifiers?: Array<StatementAllOf1>;
    /**
     * 
     * @type {Array<StatementAllOf2References>}
     * @memberof StatementAllOf2
     */
    references?: Array<StatementAllOf2References>;
}

/**
 * Check if a given object implements the StatementAllOf2 interface.
 */
export function instanceOfStatementAllOf2(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StatementAllOf2FromJSON(json: any): StatementAllOf2 {
    return StatementAllOf2FromJSONTyped(json, false);
}

export function StatementAllOf2FromJSONTyped(json: any, ignoreDiscriminator: boolean): StatementAllOf2 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'qualifiers': !exists(json, 'qualifiers') ? undefined : ((json['qualifiers'] as Array<any>).map(StatementAllOf1FromJSON)),
        'references': !exists(json, 'references') ? undefined : ((json['references'] as Array<any>).map(StatementAllOf2ReferencesFromJSON)),
    };
}

export function StatementAllOf2ToJSON(value?: StatementAllOf2 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'qualifiers': value.qualifiers === undefined ? undefined : ((value.qualifiers as Array<any>).map(StatementAllOf1ToJSON)),
        'references': value.references === undefined ? undefined : ((value.references as Array<any>).map(StatementAllOf2ReferencesToJSON)),
    };
}

